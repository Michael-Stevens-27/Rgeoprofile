hist(mod1)
hist(response~NZT*caff)
boxplot(response~NZT*caff)
abline(h=0)
boxplot(response~NZT*caff,names <- c("placebo","NZT","caffeine","both"))
boxplot(response~NZT*caff,labels <- c("placebo","NZT","caffeine","both"))
boxplot(response~NZT*caff)
both <- round(rnorm(10,10,2))#
NZT <- round(rnorm(10,0,2))#
caffeine <- round(rnorm(10,0,2))#
placebo <- round(rnorm(10,0,2))#
#
NZTyesno <- rep(c("yes","no"),c(20,20))#
caffyesno <- rep(c("yes","no","yes","no"),c(10,10,10,10))#
response <- c(placebo,NZT,caffeine,both)
both <- round(rnorm(10,10,2))#
NZT <- round(rnorm(10,0,2))#
caffeine <- round(rnorm(10,0,2))#
placebo <- round(rnorm(10,0,2))#
#
NZTyesno <- rep(c("yes","no"),c(20,20))#
caffyesno <- rep(c("yes","no","yes","no"),c(10,10,10,10))#
response <- c(placebo,NZT,caffeine,both)#
#
mod1 <- aov(response~ NZTyesno* caffyesno)#
summary(mod1)#
TukeyHSD(mod1)#
 boxplot(response~ NZTyesno* caffyesno)#
 abline(h=0)
boxplot(response~ NZTyesno* caffyesno)
boxplot(c(placebo,NZT,caffeine,both))
boxplot(placebo,NZT,caffeine,both)
boxplot(placebo,NZT,caffeine,both,names <- c("A","B","C","D"))
boxplot(placebo,NZT,caffeine,both,names = c("A","B","C","D"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","gray,","gray","darkgray"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","grey,","gray","darkgray"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","blue,","blue","black"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","gray","gray","black"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","gray","gray","darkgray"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"))
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"),ylab="treatment","xlab="chanhe in IQ")
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"),xlab="treatment","ylab="change in IQ")
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"),xlab="treatment",ylab="change in IQ")
summary(mod1)#
TukeyHSD(mod1)
abline(h=0)
boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"),xlab="treatment",ylab="change in IQ")#
abline(h=0)
TMsize <- rnorm(30,35,2)
TMsize
TMsize <- rnorm(30,30,2)
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,30,2)
TMaggression <- (TMsize*1.8) + rnorm(30,0,2)
plot(TMsize, TMaggression)
points(NTMsize, NTMaggression)
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,30,2)#
#
TMaggression <- (TMsize*1.8) + rnorm(30,0,2)#
TMaggression <- (NTMsize*1.1) + rnorm(30,0,2)#
#
plot(TMsize, TMaggression)#
points(NTMsize, NTMaggression)
plot(TMsize, TMaggression)#
points(TMsize, TMaggression)#
points(NTMsize, NTMaggression)
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression))
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,30,2)#
#
TMaggression <- (TMsize*1.8) + rnorm(30,0,2)#
TNMaggression <- (NTMsize*1.1) + rnorm(30,0,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n")#
points(TMsize, TMaggression)#
points(NTMsize, NTMaggression)
NTMaggression <- (NTMsize*1.1) + rnorm(30,0,2)
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n")
points(TMsize, TMaggression)#
points(NTMsize, NTMaggression)
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="white")
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.8) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1.1) + rnorm(30,0,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1.1) + rnorm(30,0,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")
abline(TMaggression,TMsize,col="black")
abline(TMaggression~TMsize,col="black")
abline(lm(TMaggression~TMsize),col="black")
abline(lm(NTMaggression~NTMsize),col="gray")
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlim=c(0,50))
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")
legend(c("TM","NTM"),col=c("black","gray"))
legend(1,800,fill=c("black","gray"),legend=c("TM","NTM"))
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1) + rnorm(30,5,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- rnorm(30,35,4)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- rnorm(30,35,4)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
#abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- rnorm(30,5,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1.1) + rnorm(30,5,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1.1) + rnorm(30,2,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.5) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1.1) + rnorm(30,2,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.3) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1.1) + rnorm(30,2,2)#
#
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),type="n",xlab="size (mm)",ylab="aggression")#
points(TMsize, TMaggression,pch=16,col="black")#
points(NTMsize, NTMaggression,pch=16,col="gray")#
abline(lm(TMaggression~TMsize),col="black")#
abline(lm(NTMaggression~NTMsize),col="gray")#
legend(30,50,fill=c("black","gray"),legend=c("TM","NTM"))
plot(c(TMsize,NTMsize), c(TMaggression,NTMaggression),pch=16,col="black"),xlab="size (mm)",ylab="aggression")
plot(c(TMaggression,NTMaggression),pch=16,col="black"),xlab="size (mm)",ylab="aggression")
plot(TMaggression,NTMaggression,pch=16,col="black"),xlab="size (mm)",ylab="aggression")
plot(TMaggression,NTMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression")
TMaggression <- (TMsize*1.5) + rnorm(30,0,2)
plot(TMaggression,NTMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression")
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.5) + rnorm(30,0,2)#
NTMaggression <- (NTMsize*1.1) + rnorm(30,2,2)#
plot(TMaggression,NTMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression")
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression")
TMaggression <- (TMsize*1.2) + rnorm(30,0,2)
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression")
modTM <- lm(TMaggression~ TMsize)
summary(modTM)
abline(modTM)
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.2) + rnorm(30,0,2)#
NTMaggression <-rnorm(36,4,2)#
par(mfrow=c(1,2))#
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)#
#
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="territorial males")
#____________________________________________________#
#
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.2) + rnorm(30,0,2)#
NTMaggression <-rnorm(30,36,2)#
par(mfrow=c(1,2))#
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)#
#
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="non-territorial males")
par(mfrow=c(1,2))#
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)#
#
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="non-territorial males")#
modNTM <- lm(NTMaggression~ NTMsize)#
summary(modNTM)#
abline(modNTM)
par(mfrow=c(1,2))#
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)#
#
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="non-territorial males")#
modNTM <- lm(NTMaggression~ NTMsize)#
summary(modNTM)#
#abline(modNTM)
summary(mod1)
citation()
my.matrix=matrix(data=seq(1:12),nrow=6,ncol=2,byrow=T)my.matrix[,1]
sample(2:5,2,replace=F)
sample(1:10,20,replace=F)
# Produce a series of plots, walking through the Gibbs sampler step by step.#
#
# --------------------------------------------------#
#
# start optional save-to-file function#
plotOn = function(active=FALSE,fileroot='',filestem1='',filestem2='',fileindex='',type='pdf',width=6,height=6,res=300) {#
	if (active) {#
		if (type=='pdf') {#
			pdf(file=paste(fileroot,filestem1,filestem2,fileindex,".pdf",sep=""), bg="white", width=width, height=height)#
		}#
		if (type=='png') {#
			png(file=paste(fileroot,filestem1,filestem2,fileindex,".png",sep=""), bg="white", width=width*500, height=height*500,res=res)#
		}#
	}#
}#
#
# end optional save-to-file function#
plotOff = function(active=FALSE) {#
	if (active) {#
		dev.off()#
	}#
}#
#
# smooth a matrix#
matSmooth = function(z,smoothSize) {#
	newMat1 = matrix(0,nrow(z),smoothSize)#
	for (i in 1:nrow(z)) {#
		newMat1[i,] = spline(z[i,],n=smoothSize)$y#
	}#
	newMat2 = matrix(0,smoothSize,smoothSize)#
	for (i in 1:smoothSize) {#
		newMat2[,i] = spline(newMat1[,i],n=smoothSize)$y#
	}#
	return(newMat2)#
}#
#
# --------------------------------------------------#
#
# parameters#
L = 15#
sigma = 5#
tau = 10#
#
mu_x = c(-6,5)#
mu_y = c(-5,5)#
#
#mu_x = c(-1,4)#
#mu_y = c(3,-3)#
true_group = c(rep(1,5),rep(2,5))#
#
group = true_group#
n = length(group)#
reps = 1000#
#
# save to...#
fileroot = "~/Desktop/R input and output/Gibbs/"#
filetype = 'png'#
fileres = 200#
filewidth=3#
fileheight=3#
plotToFile = TRUE#
#
data_x = rnorm(n,mean=mu_x[group],sd=sigma)#
data_y = rnorm(n,mean=mu_y[group],sd=sigma)#
#
gridsize = 101#
smoothSize = 500#
xvec = seq(-L,L,l=gridsize)#
yvec = seq(-L,L,l=gridsize)#
xvec2 = spline(xvec,n=smoothSize)$y#
yvec2 = spline(yvec,n=smoothSize)$y#
xmat = outer(rep(1,gridsize),xvec)#
ymat = outer(yvec,rep(1,gridsize))#
#
mu1_keep = matrix(0,reps,2)#
mu2_keep = matrix(0,reps,2)#
#
# calculate and plot initial (random) grouping#
group = sample(2,n,rep=T)#
#
#__________________________________________________________#
# PLOT 1 RAW DATA#
#__________________________________________________________#
# data no groups#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs0',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 2 WITH RANDOM LABELS#
#__________________________________________________________#
# plot with random labels#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs1',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#
# calculate and plot first posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
#__________________________________________________________#
# PLOT 3 SOURCE 1 CONTOURS#
#__________________________________________________________#
# plot contours for group 1#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs2',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 4 SOURCE 1 CONTOURS AND DRAW#
#__________________________________________________________#
# draw from first posterior distribution#
postmean_x = sum(data_x[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu1_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu1_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu1_keep[1,] = c(mu1_x,mu1_y)#
#
# plot contours and draw for group 1#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs3',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 5 SOURCE 2 CONTOURS#
#__________________________________________________________#
#
# plot contours for group 2#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs4',type=filetype,res=fileres,width=filewidth,height=fileheight)#
#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
points(data_x,data_y,pch=4,lwd=2)#
#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 6 SOURCE 2 CONTOURS AND DRAW#
#__________________________________________________________#
# plot contours for group 2#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs5',type=filetype,res=fileres,width=filewidth,height=fileheight)#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
#
# draw from second posterior distribution#
postmean_x = sum(data_x[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu2_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu2_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu2_keep[1,] = c(mu2_x,mu2_y)#
#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 7 DATA AND SOURCES ONLY#
#__________________________________________________________#
# plot data and both sources#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs6',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 8 DATA AND SOURCES ONLY - WITHOUT LABELS#
#__________________________________________________________#
# plot data and both sources - without labels#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs7',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 9 ASSIGN NEW GROUPS#
#__________________________________________________________#
# assign new groups#
for (i in 1:n) {#
	logProb = dnorm(data_x[i],mean=c(mu1_x,mu2_x),sd=sigma, log=TRUE) + dnorm(data_y[i],mean=c(mu1_y,mu2_y),sd=sigma, log=TRUE)#
	probVec = exp(logProb-max(logProb))#
	group[i] = sample(2,1,prob=probVec)#
}#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs8',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 10 NEW SOURCE I CONTOURS#
#__________________________________________________________#
# calculate and plot new first posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
# plot new red contours#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs9',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 10 DRAW FROM NEW SOURCE I CONTOURS#
#__________________________________________________________#
#
# draw from first posterior distribution#
postmean_x = sum(data_x[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu1_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu1_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu1_keep[2,] = c(mu1_x,mu1_y)#
#
#plot change in red draw#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs10',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 11 NEW SOURCE 2 CONTOURS#
#__________________________________________________________#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs11',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
#
#points(mu2_keep[1,1],mu2_keep[1,2],pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 12 DRAW FROM NEW SOURCE#
#__________________________________________________________#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs12',type=filetype,res=fileres,width=filewidth,height=fileheight)#
#
# calculate and plot new first posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
# draw from second posterior distribution#
postmean_x = sum(data_x[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu2_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu2_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu2_keep[2,] = c(mu2_x,mu2_y)#
#points(mu2_keep[1,1],mu2_keep[1,2],pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
#
lines(c(mu2_keep[1,1],mu2_keep[2,1]),c(mu2_keep[1,2],mu2_keep[2,2]),col="blue")#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 13 UPDATED SOURCE POSITIONS WITHOUT CONTOURS#
#__________________________________________________________#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs13',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="white")#
#
plot(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude'points(data_x,data_y,pch=4,lwd=2)#
#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
#points(mu2_keep[1,1],mu2_keep[1,2],pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
#
lines(c(mu2_keep[1,1],mu2_keep[2,1]),c(mu2_keep[1,2],mu2_keep[2,2]),col="blue")#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOTs	 14 AND ON, LOOPING THROUGH GIBBS SAMPLER#
#__________________________________________________________#
#
# continue looping through Gibbs sampler, plotting at certain points#
plotSteps = c(3,4,5,10,100,1000)#
zmat = zmat*0#
counter=0#
for (rep in 3:reps) {#
	mu1_x = mu1_keep[rep-1,1]#
	mu1_y = mu1_keep[rep-1,2]#
	mu2_x = mu2_keep[rep-1,1]#
	mu2_y = mu2_keep[rep-1,2]#
	# update grouping#
	for (i in 1:n) {#
		logProb = dnorm(data_x[i],mean=c(mu1_x,mu2_x),sd=sigma, log=TRUE) + dnorm(data_y[i],mean=c(mu1_y,mu2_y),sd=sigma, log=TRUE)#
		probVec = exp(logProb-max(logProb))#
		group[i] = sample(2,1,prob=probVec)#
	}#
	# draw new means#
	postmean_x = sum(data_x[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
	postmean_y = sum(data_y[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
	postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
	mu1_keep[rep,1] = rnorm(1,postmean_x,sd=sqrt(postvar))#
	mu1_keep[rep,2] = rnorm(1,postmean_y,sd=sqrt(postvar))#
#
	tempmat = dnorm(xmat,postmean_x,sd=sqrt(postvar))*dnorm(ymat,postmean_y,sd=sqrt(postvar))#
	zmat = zmat + tempmat/sum(tempmat)#
#
	postmean_x = sum(data_x[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
	postmean_y = sum(data_y[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
	postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
	mu2_keep[rep,1] = rnorm(1,postmean_x,sd=sqrt(postvar))#
	mu2_keep[rep,2] = rnorm(1,postmean_y,sd=sqrt(postvar))#
#
	tempmat = dnorm(xmat,postmean_x,sd=sqrt(postvar))*dnorm(ymat,postmean_y,sd=sqrt(postvar))#
	zmat = zmat + tempmat/sum(tempmat)#
	if (sum(plotSteps==rep)>0) {#
		counter = counter+1#
		# plot data and both sources - without labels#
		plotOn(active=plotToFile,fileroot,filestem1='Gibbs',fileindex=13+counter,type=filetype,res=fileres,width=filewidth,height=fileheight)#
		plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
		lines(mu1_keep[1:rep,1],mu1_keep[1:rep,2],col="red")#
		lines(mu2_keep[1:rep,1],mu2_keep[1:rep,2],col="blue")#
		points(mu1_keep[rep,1],mu1_keep[rep,2],pch=20,col="red",cex=1.5)#
		points(mu2_keep[rep,1],mu2_keep[rep,2],pch=20,col="blue",cex=1.5)#
		points(data_x,data_y,pch=4,lwd=2,cex=1)#
		plotOff(active=plotToFile)#
		if (!plotToFile) {Sys.sleep(0.5)}#
	}#
}#
#
# plot final distribution#
geoprofile = matrix(rank(zmat),nrow=nrow(zmat))#
geoprofile2 = matSmooth(geoprofile,smoothSize)#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs',fileindex=13+counter+1,type=filetype,res=fileres,width=filewidth,height=fileheight)#
image(xvec2,yvec2,t(geoprofile2),xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2,cex=1)#
plotOff(active=plotToFile)#
#
plotOn(active=plotToFile,fileroot,filestem1='GibbsFinal',fileindex=13+counter+1,type=filetype,res=fileres,width=filewidth,height=fileheight)#
image(xvec2,yvec2,t(geoprofile2),xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2,cex=1)#
points(mu_x,mu_y,pch=15,col=c("blue","red"))#
plotOff(active=plotToFile)
# Produce a series of plots, walking through the Gibbs sampler step by step.#
#
# --------------------------------------------------#
#
# start optional save-to-file function#
plotOn = function(active=FALSE,fileroot='',filestem1='',filestem2='',fileindex='',type='pdf',width=6,height=6,res=300) {#
	if (active) {#
		if (type=='pdf') {#
			pdf(file=paste(fileroot,filestem1,filestem2,fileindex,".pdf",sep=""), bg="white", width=width, height=height)#
		}#
		if (type=='png') {#
			png(file=paste(fileroot,filestem1,filestem2,fileindex,".png",sep=""), bg="white", width=width*500, height=height*500,res=res)#
		}#
	}#
}#
#
# end optional save-to-file function#
plotOff = function(active=FALSE) {#
	if (active) {#
		dev.off()#
	}#
}#
#
# smooth a matrix#
matSmooth = function(z,smoothSize) {#
	newMat1 = matrix(0,nrow(z),smoothSize)#
	for (i in 1:nrow(z)) {#
		newMat1[i,] = spline(z[i,],n=smoothSize)$y#
	}#
	newMat2 = matrix(0,smoothSize,smoothSize)#
	for (i in 1:smoothSize) {#
		newMat2[,i] = spline(newMat1[,i],n=smoothSize)$y#
	}#
	return(newMat2)#
}#
#
# --------------------------------------------------#
#
# parameters#
L = 15#
sigma = 5#
tau = 10#
#
mu_x = c(-6,5)#
mu_y = c(-5,5)#
#
#mu_x = c(-1,4)#
#mu_y = c(3,-3)#
true_group = c(rep(1,5),rep(2,5))#
#
group = true_group#
n = length(group)#
reps = 1000#
#
# save to...#
fileroot = "~/Desktop/R input and output/Gibbs/"#
filetype = 'png'#
fileres = 200#
filewidth=3#
fileheight=3#
plotToFile = TRUE#
#
data_x = rnorm(n,mean=mu_x[group],sd=sigma)#
data_y = rnorm(n,mean=mu_y[group],sd=sigma)#
#
gridsize = 101#
smoothSize = 500#
xvec = seq(-L,L,l=gridsize)#
yvec = seq(-L,L,l=gridsize)#
xvec2 = spline(xvec,n=smoothSize)$y#
yvec2 = spline(yvec,n=smoothSize)$y#
xmat = outer(rep(1,gridsize),xvec)#
ymat = outer(yvec,rep(1,gridsize))#
#
mu1_keep = matrix(0,reps,2)#
mu2_keep = matrix(0,reps,2)#
#
# calculate and plot initial (random) grouping#
group = sample(2,n,rep=T)#
#
#__________________________________________________________#
# PLOT 1 RAW DATA#
#__________________________________________________________#
# data no groups#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs0',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 2 WITH RANDOM LABELS#
#__________________________________________________________#
# plot with random labels#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs1',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#
# calculate and plot first posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
#__________________________________________________________#
# PLOT 3 SOURCE 1 CONTOURS#
#__________________________________________________________#
# plot contours for group 1#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs2',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 4 SOURCE 1 CONTOURS AND DRAW#
#__________________________________________________________#
# draw from first posterior distribution#
postmean_x = sum(data_x[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu1_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu1_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu1_keep[1,] = c(mu1_x,mu1_y)#
#
# plot contours and draw for group 1#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs3',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 5 SOURCE 2 CONTOURS#
#__________________________________________________________#
#
# plot contours for group 2#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs4',type=filetype,res=fileres,width=filewidth,height=fileheight)#
#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
points(data_x,data_y,pch=4,lwd=2)#
#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 6 SOURCE 2 CONTOURS AND DRAW#
#__________________________________________________________#
# plot contours for group 2#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs5',type=filetype,res=fileres,width=filewidth,height=fileheight)#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
#
# draw from second posterior distribution#
postmean_x = sum(data_x[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu2_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu2_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu2_keep[1,] = c(mu2_x,mu2_y)#
#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 7 DATA AND SOURCES ONLY#
#__________________________________________________________#
# plot data and both sources#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs6',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 8 DATA AND SOURCES ONLY - WITHOUT LABELS#
#__________________________________________________________#
# plot data and both sources - without labels#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs7',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 9 ASSIGN NEW GROUPS#
#__________________________________________________________#
# assign new groups#
for (i in 1:n) {#
	logProb = dnorm(data_x[i],mean=c(mu1_x,mu2_x),sd=sigma, log=TRUE) + dnorm(data_y[i],mean=c(mu1_y,mu2_y),sd=sigma, log=TRUE)#
	probVec = exp(logProb-max(logProb))#
	group[i] = sample(2,1,prob=probVec)#
}#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs8',type=filetype,res=fileres,width=filewidth,height=fileheight)#
plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 10 NEW SOURCE I CONTOURS#
#__________________________________________________________#
# calculate and plot new first posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
# plot new red contours#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs9',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 10 DRAW FROM NEW SOURCE I CONTOURS#
#__________________________________________________________#
#
# draw from first posterior distribution#
postmean_x = sum(data_x[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu1_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu1_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu1_keep[2,] = c(mu1_x,mu1_y)#
#
#plot change in red draw#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs10',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 11 NEW SOURCE 2 CONTOURS#
#__________________________________________________________#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs11',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
#
#points(mu2_keep[1,1],mu2_keep[1,2],pch=20,col="blue",cex=1.5)#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
plotOff(active=plotToFile)#
#
#__________________________________________________________#
# PLOT 12 DRAW FROM NEW SOURCE#
#__________________________________________________________#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs12',type=filetype,res=fileres,width=filewidth,height=fileheight)#
#
# calculate and plot new first posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==1) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="red")#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#points(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
#
# calculate and plot second posterior distribution#
zmat = dnorm(xmat,0,sd=tau,log=TRUE) + dnorm(ymat,0,sd=tau,log=TRUE)#
for (i in 1:n) {#
	if (group[i]==2) {#
		zmat = zmat + dnorm(data_x[i],xmat,sd=sigma,log=TRUE) + dnorm(data_y[i],ymat,sd=sigma,log=TRUE)#
	}#
}#
contour(xvec,yvec,t(exp(zmat)),add=TRUE,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="blue")#
# draw from second posterior distribution#
postmean_x = sum(data_x[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postmean_y = sum(data_y[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
mu2_x = rnorm(1,postmean_x,sd=sqrt(postvar))#
mu2_y = rnorm(1,postmean_y,sd=sqrt(postvar))#
mu2_keep[2,] = c(mu2_x,mu2_y)#
#points(mu2_keep[1,1],mu2_keep[1,2],pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
#
lines(c(mu2_keep[1,1],mu2_keep[2,1]),c(mu2_keep[1,2],mu2_keep[2,2]),col="blue")#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOT 13 UPDATED SOURCE POSITIONS WITHOUT CONTOURS#
#__________________________________________________________#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs13',type=filetype,res=fileres,width=filewidth,height=fileheight)#
contour(xvec,yvec,t(exp(zmat)),drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude',col="white")#
#
plot(mu1_keep[1,1],mu1_keep[1,2],pch=20,col="red",cex=1.5,drawlabels=FALSE,xaxs="i",yaxs="i",xlab='longitude',ylab='latitude'points(data_x,data_y,pch=4,lwd=2)#
#
lines(c(mu1_keep[1,1],mu1_keep[2,1]),c(mu1_keep[1,2],mu1_keep[2,2]),col="red")#
#
text(data_x,data_y,labels=group,pos=3)#
points(mu1_x,mu1_y,pch=20,col="red",cex=1.5)#
#points(mu2_keep[1,1],mu2_keep[1,2],pch=20,col="blue",cex=1.5)#
points(data_x,data_y,pch=4,lwd=2)#
text(data_x,data_y,labels=group,pos=3)#
#
lines(c(mu2_keep[1,1],mu2_keep[2,1]),c(mu2_keep[1,2],mu2_keep[2,2]),col="blue")#
points(mu2_x,mu2_y,pch=20,col="blue",cex=1.5)#
plotOff(active=plotToFile)#
#__________________________________________________________#
# PLOTs	 14 AND ON, LOOPING THROUGH GIBBS SAMPLER#
#__________________________________________________________#
#
# continue looping through Gibbs sampler, plotting at certain points#
plotSteps = c(3,4,5,10,100,1000)#
zmat = zmat*0#
counter=0#
for (rep in 3:reps) {#
	mu1_x = mu1_keep[rep-1,1]#
	mu1_y = mu1_keep[rep-1,2]#
	mu2_x = mu2_keep[rep-1,1]#
	mu2_y = mu2_keep[rep-1,2]#
	# update grouping#
	for (i in 1:n) {#
		logProb = dnorm(data_x[i],mean=c(mu1_x,mu2_x),sd=sigma, log=TRUE) + dnorm(data_y[i],mean=c(mu1_y,mu2_y),sd=sigma, log=TRUE)#
		probVec = exp(logProb-max(logProb))#
		group[i] = sample(2,1,prob=probVec)#
	}#
	# draw new means#
	postmean_x = sum(data_x[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
	postmean_y = sum(data_y[group==1])/sigma^2/(sum(group==1)/sigma^2+1/tau^2)#
	postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
	mu1_keep[rep,1] = rnorm(1,postmean_x,sd=sqrt(postvar))#
	mu1_keep[rep,2] = rnorm(1,postmean_y,sd=sqrt(postvar))#
#
	tempmat = dnorm(xmat,postmean_x,sd=sqrt(postvar))*dnorm(ymat,postmean_y,sd=sqrt(postvar))#
	zmat = zmat + tempmat/sum(tempmat)#
#
	postmean_x = sum(data_x[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
	postmean_y = sum(data_y[group==2])/sigma^2/(sum(group==2)/sigma^2+1/tau^2)#
	postvar = 1/(sum(group==1)/sigma^2+1/tau^2)#
	mu2_keep[rep,1] = rnorm(1,postmean_x,sd=sqrt(postvar))#
	mu2_keep[rep,2] = rnorm(1,postmean_y,sd=sqrt(postvar))#
#
	tempmat = dnorm(xmat,postmean_x,sd=sqrt(postvar))*dnorm(ymat,postmean_y,sd=sqrt(postvar))#
	zmat = zmat + tempmat/sum(tempmat)#
	if (sum(plotSteps==rep)>0) {#
		counter = counter+1#
		# plot data and both sources - without labels#
		plotOn(active=plotToFile,fileroot,filestem1='Gibbs',fileindex=13+counter,type=filetype,res=fileres,width=filewidth,height=fileheight)#
		plot(0,type='n',xlim=c(-L,L),ylim=c(-L,L),xaxs="i",yaxs="i",xlab='longitude',ylab='latitude')#
		lines(mu1_keep[1:rep,1],mu1_keep[1:rep,2],col="red")#
		lines(mu2_keep[1:rep,1],mu2_keep[1:rep,2],col="blue")#
		points(mu1_keep[rep,1],mu1_keep[rep,2],pch=20,col="red",cex=1.5)#
		points(mu2_keep[rep,1],mu2_keep[rep,2],pch=20,col="blue",cex=1.5)#
		points(data_x,data_y,pch=4,lwd=2,cex=1)#
		plotOff(active=plotToFile)#
		if (!plotToFile) {Sys.sleep(0.5)}#
	}#
}#
#
# plot final distribution#
geoprofile = matrix(rank(zmat),nrow=nrow(zmat))#
geoprofile2 = matSmooth(geoprofile,smoothSize)#
#
plotOn(active=plotToFile,fileroot,filestem1='Gibbs',fileindex=13+counter+1,type=filetype,res=fileres,width=filewidth,height=fileheight)#
image(xvec2,yvec2,t(geoprofile2),xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2,cex=1)#
plotOff(active=plotToFile)#
#
plotOn(active=plotToFile,fileroot,filestem1='GibbsFinal',fileindex=13+counter+1,type=filetype,res=fileres,width=filewidth,height=fileheight)#
image(xvec2,yvec2,t(geoprofile2),xlab='longitude',ylab='latitude')#
points(data_x,data_y,pch=4,lwd=2,cex=1)#
points(mu_x,mu_y,pch=15,col=c("blue","red"))#
plotOff(active=plotToFile)
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
denom_2 <- (B^(g-f))
denom_2
num_2 <- (B^(g-f))#
denom_2 <- (2*B)-sqrt((x_val-0)^2)+(y_val-0)^2))^g
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
yval <- 0#
#
num_1 <- 1#
denom_1 <- sqrt((x_val-0)^2)+(y_val-0)^2))^f#
num_2 <- (B^(g-f))#
denom_2 <- (2*B)-sqrt((x_val-0)^2)+(y_val-0)^2))^g
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
yval <- 0#
#
num_1 <- 1#
denom_1 <- sqrt((x_val-0)^2+(y_val-0)^2))^f#
num_2 <- (B^(g-f))#
denom_2 <- (2*B)-sqrt((x_val-0)^2)+(y_val-0)^2))^g
denom_1 <- (x_val-0)^2+(y_val-0)^2)
denom_1 <- (x_val-0)^2+(y_val-0)^2
x_range <- seq(-10,10,1)
results <- rep(NA,length(x_range))
results
results <- (num_1/denom_1)+(num_2/denom_2)
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
yval <- 0#
#
x_range <- seq(-10,10,1)#
#
results <- rep(NA,length(x_range))#
#
num_1 <- 1#
denom_1 <- sqrt((x_val-0)^2+(y_val-0)^2)^f#
num_2 <- (B^(g-f))#
denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
results <- (num_1/denom_1)+(num_2/denom_2)
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
yval <- 0#
#
x_range <- seq(-10,10,1)#
xval <- 3#
results <- rep(NA,length(x_range))#
#
num_1 <- 1#
denom_1 <- sqrt((x_val-0)^2+(y_val-0)^2)^f#
num_2 <- (B^(g-f))#
denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
results <- (num_1/denom_1)+(num_2/denom_2)
sqrt((x_val-0)^2+(y_val-0)^2)^f
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
yval <- 0#
#
x_range <- seq(-10,10,1)#
x_val <- 3#
results <- rep(NA,length(x_range))#
#
num_1 <- 1#
denom_1 <- sqrt((x_val-0)^2+(y_val-0)^2)^f#
num_2 <- (B^(g-f))#
denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
results <- (num_1/denom_1)+(num_2/denom_2)
sqrt((x_val-0)^2+(y_val-0)^2)^f
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
y_val <- 0#
#
x_range <- seq(-10,10,1)#
x_val <- 3#
results <- rep(NA,length(x_range))#
#
num_1 <- 1#
denom_1 <- sqrt((x_val-0)^2+(y_val-0)^2)^f#
num_2 <- (B^(g-f))#
denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
results <- (num_1/denom_1)+(num_2/denom_2)
results
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
y_val <- 0#
#
x_range <- seq(-10,10,1)#
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		num_1 <- 1#
		denom_1 <- sqrt((x_val-0)^2+(y_val-0)^2)^f#
		num_2 <- (B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}
plot(all_results,type="l")
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
y_val <- 0#
#
x_range <- seq(-10,10,1)#
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		xval <- x_range[i]#
		num_1 <- 1#
		denom_1 <- sqrt((x_val-0)^2+(y_val-0)^2)^f#
		num_2 <- (B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(all_results,type="l")
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
y_val <- 0#
#
x_range <- seq(-10,10,1)#
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		xval <- x_range[i]#
		num_1 <- 1#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(all_results,type="l")
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
y_val <- 0#
#
x_range <- seq(-10,10,1)#
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		xval <- x_range[i]#
		if(abs(x_val-home))<B phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(all_results,type="l")
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		xval <- x_range[i]#
		if(abs(x_val-home)<B phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(all_results,type="l")
i<-3
xval <- x_range[i]
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		x_val <- x_range[i]#
		if(abs(x_val-home)<B phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(all_results,type="l")
x_val <- x_range[i]
x_val
if(abs(x_val-home)<B phi <- 0 else phi <- 1
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		x_val <- x_range[i]#
		if(abs(x_val-home)<B) phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(all_results,type="l")
plot(x_range ,all_results,type="l")
x_range <- seq(-10,10,0.1)#
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		x_val <- x_range[i]#
		if(abs(x_val-home)<B) phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(all_results,type="l")
plot(x_range ,all_results,type="l")
x_range
x_range[101]
i<-101#
x_val <- x_range[i]#
		if(abs(x_val-home)<B phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	plot(x_range ,all_results,type="l")
all_results
i<-101#
x_val <- x_range[i]#
		if(abs(x_val-home)<B phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
result
x_range[51]
i<-51#
x_val <- x_range[i]#
		if(abs(x_val-home)<B phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
result
i<-50#
x_val <- x_range[i]#
		if(abs(x_val-home)<B phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
result
plot(x_range ,all_results,type="l",xlab="distance from home",ylab="p")
# Issues with outside of buffer decay#
# 2d cross section of the function would be useful...remove a point#
##
g=1.2#
f=1.2#
B=5#
dist=1:100#
d<- function (dist,B, g=1.2, h=1.2,k=1) {#
	ifelse( B <= dist, (1/dist^h),((k*B^(g-h))/(2*B-dist)^g) )#
}#
dist=1:100#
B<-50#
x<-d(dist,B)#
plot(dist,x,type="l")#
# Now with a cauchy decay function on the outside of the slope#
# cauchy decay means fatter tails, more likely to work with biology#
cd<- function (dist, B, g=1.2, h=1.2, k=1,gamma=0.68*B) {#
	(1/pi*gamma/((dist-B)^2+gamma^2)))#
}#
dist=1:100#
B<-50#
x<-cd(dist,B)#
plot(dist,x,type="l")
# Issues with outside of buffer decay#
# 2d cross section of the function would be useful...remove a point#
##
g=1.2#
f=1.2#
B=5#
dist=1:100#
d<- function (dist,B, g=1.2, h=1.2,k=1) {#
	ifelse( B <= dist, (1/dist^h),((k*B^(g-h))/(2*B-dist)^g) )#
}#
dist=1:100#
B<-50#
x<-d(dist,B)#
plot(dist,x,type="l")#
# Now with a cauchy decay function on the outside of the slope#
# cauchy decay means fatter tails, more likely to work with biology#
cd<- function (dist, B, g=1.2, h=1.2, k=1,gamma=0.68*B) {#
	(1/pi*gamma/((dist-B)^2+gamma^2))#
}#
dist=1:100#
B<-50#
x<-cd(dist,B)#
plot(dist,x,type="l")
# CGT#
B <- 5#
g <- 1.2#
f <- 1.2#
#
home <- 0#
y_val <- 0#
#
x_range <- seq(-10,10,0.1)#
x_range[51]#
#
all_results <- rep(NA,length(x_range))#
for(i in 1:length(x_range))#
	{#
		x_val <- x_range[i]#
		if(abs(x_val-home)<B) phi <- 0 else phi <- 1#
		num_1 <- phi#
		denom_1 <- (sqrt((x_val-0)^2+(y_val-0)^2))^f#
		num_2 <- (1-phi)*(B^(g-f))#
		denom_2 <- (2*B)-sqrt((x_val-0)^2+(y_val-0)^2)^g#
		result <- (num_1/denom_1)+(num_2/denom_2)#
		all_results[i] <- result#
	}#
	plot(x_range ,all_results,type="l",xlab="distance from home",ylab="p")
seq((cells-occupied),occupied,-1)
cells <- 144#
occupied <- 4#
seq((cells-occupied),occupied,-1)
nums <- seq((cells-occupied),occupied,-1)
denoms <- rep(cells,length(nums))
terms <- nums/denoms
terms
nums
denoms
cumprod(terms)
-1cumprod(terms)
1-cumprod(terms)
plot(1-cumprod(terms))
plot(1-cumprod(terms),type="l")
1-cumprod(terms)
# ____________________________________________________________#
# LOOP#
# ____________________________________________________________#
replicates <-100#
my_res <- rep(NA,replicates)#
for(k in 1:replicates)#
{#
# ____________________________________________________________#
# BATTLESHIPS V 1#
# ____________________________________________________________#
# specify battleship#
battleship_1 <- cbind(c(3,4,5,6),c(5,5,5,5))#
grid_dimension <- 12#
# plot battleship with grid lines#
plot(battleship_1,xlab="",ylab="",xlim=c(1, grid_dimension),ylim=c(1, grid_dimension),pch=15,cex=3)#
for(my_val in 1: grid_dimension)#
	{#
		abline(h=my_val,col="blue")#
		abline(v=my_val,col="blue")#
	}#
#create list of all possible guesses#
xval <- rep(1: grid_dimension, grid_dimension)#
yval <- rep(1: grid_dimension,rep(grid_dimension, grid_dimension))#
guesses <- matrix(cbind(xval,yval),ncol=2)#
#
# how many guesses remain (used to make sure the 'player' doesn't select the same cell twice)#
remaining_guesses <- dim(guesses)[1]#
#
# how many cells are in the battleship (will be used to check for hits later)#
misses <- dim(battleship_1)[1]#
#
#play the game, and stop when the battleship is hit once#
while(misses==dim(battleship_1)[1])#
	{#
		#choose a cell to attack#
		this_guess <- sample(1:remaining_guesses,1)#
		check_guess <- matrix(guesses[this_guess,],ncol=2)#
		#plot the guess#
		points(guesses[this_guess,1],guesses[this_guess,2],pch=4,col="red",cex=3,lwd=3)#
		#check whether this guess is a hit#
		checking <- apply(battleship_1, 1, function(x) all(x == check_guess))#
		misses <- length(which(checking==FALSE))#
#
		# drop this guess from list of remaining guesses#
		guesses <- guesses[-this_guess,]#
		remaining_guesses <- dim(guesses)[1]#
	}#
#
# calculate hit score and annotate plot#
total_attempts <- (grid_dimension^2)-dim(guesses)[1]#
hit_score <- round(total_attempts/(grid_dimension^2),2)#
mtext(paste("attempts =",total_attempts,"hs =", total_attempts ,"/",(grid_dimension^2),"=",hit_score), side = 1, line = -24, outer = TRUE)#
my_res[k]<-total_attempts#
#
}#
#
hist(my_res,main=NULL,xlab="attempts",freq=TRUE,right=FALSE)#
mean(my_res)#
median(my_res)
nums
denoms
terms
cumprod(terms)
1-xcumprod(terms)
1-cumprod(terms)
# ____________________________________________________________#
# LOOP#
# ____________________________________________________________#
replicates <-1000#
my_res <- rep(NA,replicates)#
for(k in 1:replicates)#
{#
# ____________________________________________________________#
# BATTLESHIPS V 1#
# ____________________________________________________________#
# specify battleship#
battleship_1 <- cbind(c(3,4,5,6),c(5,5,5,5))#
grid_dimension <- 12#
# plot battleship with grid lines#
plot(battleship_1,xlab="",ylab="",xlim=c(1, grid_dimension),ylim=c(1, grid_dimension),pch=15,cex=3)#
for(my_val in 1: grid_dimension)#
	{#
		abline(h=my_val,col="blue")#
		abline(v=my_val,col="blue")#
	}#
#create list of all possible guesses#
xval <- rep(1: grid_dimension, grid_dimension)#
yval <- rep(1: grid_dimension,rep(grid_dimension, grid_dimension))#
guesses <- matrix(cbind(xval,yval),ncol=2)#
#
# how many guesses remain (used to make sure the 'player' doesn't select the same cell twice)#
remaining_guesses <- dim(guesses)[1]#
#
# how many cells are in the battleship (will be used to check for hits later)#
misses <- dim(battleship_1)[1]#
#
#play the game, and stop when the battleship is hit once#
while(misses==dim(battleship_1)[1])#
	{#
		#choose a cell to attack#
		this_guess <- sample(1:remaining_guesses,1)#
		check_guess <- matrix(guesses[this_guess,],ncol=2)#
		#plot the guess#
		points(guesses[this_guess,1],guesses[this_guess,2],pch=4,col="red",cex=3,lwd=3)#
		#check whether this guess is a hit#
		checking <- apply(battleship_1, 1, function(x) all(x == check_guess))#
		misses <- length(which(checking==FALSE))#
#
		# drop this guess from list of remaining guesses#
		guesses <- guesses[-this_guess,]#
		remaining_guesses <- dim(guesses)[1]#
	}#
#
# calculate hit score and annotate plot#
total_attempts <- (grid_dimension^2)-dim(guesses)[1]#
hit_score <- round(total_attempts/(grid_dimension^2),2)#
mtext(paste("attempts =",total_attempts,"hs =", total_attempts ,"/",(grid_dimension^2),"=",hit_score), side = 1, line = -24, outer = TRUE)#
my_res[k]<-total_attempts#
#
}#
#
hist(my_res,main=NULL,xlab="attempts",freq=TRUE,right=FALSE)#
mean(my_res)#
median(my_res)
# q 3#
#
both <- round(rnorm(0,10,2))#
NZT <- round(rnorm(10,0,2))#
caffeine <- round(rnorm(10,0,2))#
placebo <- round(rnorm(0,0,2))#
#
NZTyesno <- rep(c("yes","no"),c(20,20))#
caffyesno <- rep(c("yes","no","yes","no"),c(10,10,10,10))#
response <- c(placebo,NZT,caffeine,both)#
#
mod1 <- aov(response~NZTyesno*caffyesno)#
summary(mod1)#
TukeyHSD(mod1) #
 boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"),xlab="treatment",ylab="change in IQ")#
abline(h=0)
summary(mod1)
summary(mod1)#
TukeyHSD(mod1) #
 boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"),xlab="treatment",ylab="change in IQ")#
abline(h=0)
placebo <- round(rnorm(0,0,2))
placebo
# q 3#
#
both <- round(rnorm(10,0,2))#
NZT <- round(rnorm(10,10,2))#
caffeine <- round(rnorm(10,10,2))#
placebo <- round(rnorm(10,0,2))#
#
NZTyesno <- rep(c("yes","no"),c(20,20))#
caffyesno <- rep(c("yes","no","yes","no"),c(10,10,10,10))#
response <- c(placebo,NZT,caffeine,both)#
#
mod1 <- aov(response~NZTyesno*caffyesno)#
summary(mod1)#
TukeyHSD(mod1) #
 boxplot(placebo,NZT,caffeine,both,names = c("placebo","NZT","caffeine","both"),col=c("white","lightgray","lightgray","darkgray"),xlab="treatment",ylab="change in IQ")#
abline(h=0)
TMsize <- rnorm(30,35,2)#
NTMsize <- rnorm(30,32,2)#
#
TMaggression <- (TMsize*1.2) + rnorm(30,0,2)#
NTMaggression <-rnorm(30,36,2)#
par(mfrow=c(1,2))#
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)#
#
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="non-territorial males")#
modNTM <- lm(NTMaggression~ NTMsize)#
summary(modNTM)#
#abline(modNTM)
par(mfrow=c(1,2))#
plot(TMsize, TMaggression,pch=16,col="black",xlab="size (mm)",ylab="aggression",main="territorial males")#
modTM <- lm(TMaggression~ TMsize)#
summary(modTM)#
abline(modTM)#
#
plot(NTMsize, NTMaggression,pch=16,col="gray",xlab="size (mm)",ylab="aggression",main="non-territorial males")#
modNTM <- lm(NTMaggression~ NTMsize)#
summary(modNTM)#
#abline(modNTM)
rm(list=ls())#
library(plotrix)#
library(PBSmapping)#
#
melanoma_data <- read.table("~/Desktop/MelanomaData.txt",header=TRUE)#
attach(melanoma_data)#
head(melanoma_data)#
plot(Latitude,Melanoma.males,type="n",xlab="Latitude",ylab="Melanoma rate (males)",xlim=c(30,65),ylim=c(0,25))#
draw.circle(Latitude,Melanoma.males,Per.cap.GDP/100000,col="red")#
#
text_cex <- log(Per.cap.GDP)/10#
#
text(Latitude,Melanoma.males+0.8,State,col="black",cex=0.6)#
#
mod1 <- lm(Melanoma.males~Latitude)#
summary(mod1)#
abline(mod1,col="red")
# GP dispersal and mutation model#
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
library(Rgeoprofile)#
	library(RgoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	#library(graphics)#
	library(coda)#
	library(geosphere)#
	library(PBSmapping)#
	citation("Rgeoprofile")#
# set ponds#
#
#ponds_lat <- rnorm(5,51.5,0.1)#
#ponds_lon <- rnorm(5,0,0.1)#
#
ponds_lon <- c(0,0,-0.05,0,0.05,0)#
ponds_lat <- c(51.5,51.55,51.5,51.45,51.5)#
slcdata <- cbind(ponds_lon,ponds_lat)#
LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="~/Desktop/R input and output/Output",Guardrail = 0.05,pointcol="red")#
CreateMaps()
dispersal_mat <- matrix(rep(NA,25),ncol=5)
dispersal_mat
max_capacity <- rep(10,5)#
dispersal_mat <- matrix(rep(0,25),ncol=5)#
dispersal_mat[1,] <- rep(0.05,5)
dispersal_mat
starting_strains <- rep("A",100)
max_capacity <- rep(10,5)#
dispersal_mat <- matrix(rep(0,25),ncol=5)#
dispersal_mat[1,] <- rep(0.05,5)#
dispersal_mat[1,1] <- 0#
starting_strains <- rep("A",100)
random_number <- runif()
random_number <- runif(1)
random_number
sum(dispersal_mat[pop_to_disperse,])
max_capacity <- rep(10,5)#
dispersal_mat <- matrix(rep(0,25),ncol=5)#
dispersal_mat[1,] <- rep(0.05,5)#
dispersal_mat[1,1] <- 0#
starting_strains <- rep("A",100)#
#
pop_to_disperse <- 1
sum(dispersal_mat[pop_to_disperse,])
ifelse(random_number <- sum(dispersal_mat[pop_to_disperse,]),disp <- "y","n")
random_number
random_number <- runif(1)#
		ifelse(random_number <- sum(dispersal_mat[pop_to_disperse,]),disp <- "y","n")
random_number
random_number <- runif(1)
random_number
random_number <- runif(1)#
		ifelse(random_number <- sum(dispersal_mat[pop_to_disperse,]),disp <- "y","n")
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	#library(graphics)#
	library(coda)#
	library(geosphere)#
	library(PBSmapping)#
	citation("Rgeoprofile")#
	library(spatial.tools)#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerryCrimesInput.txt",header=FALSE)#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerrySuspectSitesInput.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="~/Desktop/R input and output/Output",Guardrail = 0.05,pointcol="red")#
CreateMaps()#
RunMCMC()#
ThinandAnalyse(thinning=50)#
#
#____________________________________________________________________________#
# OUTPUT RESULTS: MAPS#
#____________________________________________________________________________#
#
PlotGP()
CreateMaps()
rm(list=ls())
#____________________________________________________________________________#
# FROM JAMES CHESHIRE#
#____________________________________________________________________________#
library(raster)#
#
CreateSpatial <-#
function(PlotPrior=T, projection="+proj=longlat +datum=WGS84"){#
  xmin <- (max(datax)+min(datax))/2 - (0.5+Guardrail)*(max(datax)-min(datax))#
  xmax <- (max(datax)+min(datax))/2 + (0.5+Guardrail)*(max(datax)-min(datax))#
  ymin <- (max(datay)+min(datay))/2 - (0.5+Guardrail)*(max(datay)-min(datay))#
  ymax <- (max(datay)+min(datay))/2 + (0.5+Guardrail)*(max(datay)-min(datay))#
  priorx <- (xmin+xmax)/2#
  priory <- (ymin+ymax)/2#
  if (tau=="DEFAULT") {#
    xdiff <<- max(datax)-min(datax)#
    ydiff <<- max(datay)-min(datay)#
    tau <<- max(c(xdiff,ydiff))#
  }#
  xvec <<- seq(xmin,xmax,length.out=gridsize2)#
  yvec <<- seq(ymin,ymax,length.out=gridsize2)#
  xmat <<- outer(rep(1,gridsize2),xvec)#
  ymat <<- outer(yvec[gridsize2:1],rep(1,gridsize2))#
  priormat <<- dnorm(xmat,mean=priorx,sd=tau)*dnorm(ymat,mean=priory,sd=tau)#
  priorraster = raster(priormat,xmin,xmax,ymin,ymax)#
  priorspatial=as(priorraster, 'SpatialGridDataFrame')#
  proj4string(priorspatial) <- CRS(projection)#
return(priorspatial)  #
}#
#
CreateSpatial()
PlotGP()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
	library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	library(graphics)#
	library(coda)#
	library(geosphere)#
	library(PBSmapping)#
	citation("Rgeoprofile")#
	library(spatial.tools)#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/MalariaCases139.txt",header=FALSE)#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/CairoOriginalVectorList.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="~/Desktop/R input and output/Output",Guardrail = 0.05,pointcol="red")#
CreateMaps()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
	library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	library(graphics)#
	library(coda)#
	library(geosphere)#
	library(PBSmapping)#
	citation("Rgeoprofile")#
	#library(spatial.tools)#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/MalariaCases139.txt",header=FALSE)#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/CairoOriginalVectorList.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="~/Desktop/R input and output/Output",Guardrail = 0.05,pointcol="red")#
CreateMaps()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
	library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	library(graphics)#
	library(coda)#
	library(geosphere)#
	#library(PBSmapping)#
	citation("Rgeoprofile")#
	#library(spatial.tools)#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/MalariaCases139.txt",header=FALSE)#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/CairoOriginalVectorList.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="~/Desktop/R input and output/Output",Guardrail = 0.05,pointcol="red")#
CreateMaps()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
	library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	library(graphics)#
	library(coda)#
	#library(geosphere)#
	#library(PBSmapping)#
	citation("Rgeoprofile")#
	#library(spatial.tools)#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/MalariaCases139.txt",header=FALSE)#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/CairoOriginalVectorList.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)
GraphicParameters(Location="~/Desktop/R input and output/Output",Guardrail = 0.05,pointcol="red")
CreateMaps()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	#library(graphics)#
	library(coda)#
	library(geosphere)#
	library(PBSmapping)#
	citation("Rgeoprofile")#
#### Compute pairwise distances between data#
Pairwise <- function(data) {#
	xmat1 = outer(rep(1,n),data[,1])#
	xmat2 = outer(data[,1],rep(1,n))#
	xdist = abs(xmat1-xmat2)#
	ymat1 = outer(rep(1,n),data[,2])#
	ymat2 = outer(data[,2],rep(1,n))#
	ydist = abs(ymat1-ymat2)#
	zdist = sqrt(xdist^2+ydist^2)#
	output = zdist[col(xmat1)>row(xmat1)]#
	return(output)#
	}#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerryCrimesInput.txt",header=FALSE)#
original_crime_data <- slcdata#
#
# do you want to extract a subset of the crime data? must be set to TRUE or FALSE#
subset_data <- FALSE#
#
# set min/max long/lat if used#
lon_min <- 30#
lon_max <- 31.38#
lat_min <-29.95#
lat_max <- 31#
#
# subsets crime data if 'subset_data' is set to TRUE above, with plots to check#
if(subset_data==TRUE)#
	{#
		par(mfrow=c(1,2))#
		plot(slcdata,main="all data",xlab="lon",ylab="lat")#
		rect(lon_min, lat_min, lon_max, lat_max,border="red")#
		slcdata <- subset(slcdata, slcdata$V1>lon_min & slcdata$V1<lon_max & slcdata$V2>lat_min & slcdata$V2<lat_max)#
		plot(slcdata,main="subset data",xlab="lon",ylab="lat")#
	}#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerrySuspectSitesInput.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="",Guardrail = 0.05,pointcol="red")#
CreateMaps()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	#library(graphics)#
	library(coda)#
	library(geosphere)#
	#library(PBSmapping)#
	citation("Rgeoprofile")#
#### Compute pairwise distances between data#
Pairwise <- function(data) {#
	xmat1 = outer(rep(1,n),data[,1])#
	xmat2 = outer(data[,1],rep(1,n))#
	xdist = abs(xmat1-xmat2)#
	ymat1 = outer(rep(1,n),data[,2])#
	ymat2 = outer(data[,2],rep(1,n))#
	ydist = abs(ymat1-ymat2)#
	zdist = sqrt(xdist^2+ydist^2)#
	output = zdist[col(xmat1)>row(xmat1)]#
	return(output)#
	}#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerryCrimesInput.txt",header=FALSE)#
original_crime_data <- slcdata#
#
# do you want to extract a subset of the crime data? must be set to TRUE or FALSE#
subset_data <- FALSE#
#
# set min/max long/lat if used#
lon_min <- 30#
lon_max <- 31.38#
lat_min <-29.95#
lat_max <- 31#
#
# subsets crime data if 'subset_data' is set to TRUE above, with plots to check#
if(subset_data==TRUE)#
	{#
		par(mfrow=c(1,2))#
		plot(slcdata,main="all data",xlab="lon",ylab="lat")#
		rect(lon_min, lat_min, lon_max, lat_max,border="red")#
		slcdata <- subset(slcdata, slcdata$V1>lon_min & slcdata$V1<lon_max & slcdata$V2>lat_min & slcdata$V2<lat_max)#
		plot(slcdata,main="subset data",xlab="lon",ylab="lat")#
	}#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerrySuspectSitesInput.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="",Guardrail = 0.05,pointcol="red")#
CreateMaps()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
library(Rgeoprofile)#
	library(RGoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	library(graphics)#
	library(coda)#
	#library(geosphere)#
	#library(PBSmapping)#
	citation("Rgeoprofile")
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
library(Rgeoprofile)#
	library(RgoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	library(graphics)#
	library(coda)#
	library(geosphere)#
	library(PBSmapping)#
	citation("Rgeoprofile")#
#### Compute pairwise distances between data#
Pairwise <- function(data) {#
	xmat1 = outer(rep(1,n),data[,1])#
	xmat2 = outer(data[,1],rep(1,n))#
	xdist = abs(xmat1-xmat2)#
	ymat1 = outer(rep(1,n),data[,2])#
	ymat2 = outer(data[,2],rep(1,n))#
	ydist = abs(ymat1-ymat2)#
	zdist = sqrt(xdist^2+ydist^2)#
	output = zdist[col(xmat1)>row(xmat1)]#
	return(output)#
	}#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerryCrimesInput.txt",header=FALSE)#
original_crime_data <- slcdata#
#
# do you want to extract a subset of the crime data? must be set to TRUE or FALSE#
subset_data <- FALSE#
#
# set min/max long/lat if used#
lon_min <- 30#
lon_max <- 31.38#
lat_min <-29.95#
lat_max <- 31#
#
# subsets crime data if 'subset_data' is set to TRUE above, with plots to check#
if(subset_data==TRUE)#
	{#
		par(mfrow=c(1,2))#
		plot(slcdata,main="all data",xlab="lon",ylab="lat")#
		rect(lon_min, lat_min, lon_max, lat_max,border="red")#
		slcdata <- subset(slcdata, slcdata$V1>lon_min & slcdata$V1<lon_max & slcdata$V2>lat_min & slcdata$V2<lat_max)#
		plot(slcdata,main="subset data",xlab="lon",ylab="lat")#
	}#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerrySuspectSitesInput.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="",Guardrail = 0.05,pointcol="red")#
CreateMaps()
rm(list=ls())#
#
#____________________________________________________________________________#
# INSTALL PACKAGES#
#____________________________________________________________________________#
#install.packages("~/Desktop/Rgeoprofile_1.1.tar.gz", repos = NULL, type = "source")#
library(Rgeoprofile)#
	library(RgoogleMaps)#
	library(sp)#
	library(rgdal)#
	library(rgeos)#
	library(graphics)#
	library(coda)#
	library(geosphere)#
	#library(PBSmapping)#
	citation("Rgeoprofile")#
#### Compute pairwise distances between data#
Pairwise <- function(data) {#
	xmat1 = outer(rep(1,n),data[,1])#
	xmat2 = outer(data[,1],rep(1,n))#
	xdist = abs(xmat1-xmat2)#
	ymat1 = outer(rep(1,n),data[,2])#
	ymat2 = outer(data[,2],rep(1,n))#
	ydist = abs(ymat1-ymat2)#
	zdist = sqrt(xdist^2+ydist^2)#
	output = zdist[col(xmat1)>row(xmat1)]#
	return(output)#
	}#
#____________________________________________________________________________#
# IMPORT DATA AND SUBSET IF NECESSARY#
#____________________________________________________________________________#
# import crimes. saves original data#
slcdata=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerryCrimesInput.txt",header=FALSE)#
original_crime_data <- slcdata#
#
# do you want to extract a subset of the crime data? must be set to TRUE or FALSE#
subset_data <- FALSE#
#
# set min/max long/lat if used#
lon_min <- 30#
lon_max <- 31.38#
lat_min <-29.95#
lat_max <- 31#
#
# subsets crime data if 'subset_data' is set to TRUE above, with plots to check#
if(subset_data==TRUE)#
	{#
		par(mfrow=c(1,2))#
		plot(slcdata,main="all data",xlab="lon",ylab="lat")#
		rect(lon_min, lat_min, lon_max, lat_max,border="red")#
		slcdata <- subset(slcdata, slcdata$V1>lon_min & slcdata$V1<lon_max & slcdata$V2>lat_min & slcdata$V2<lat_max)#
		plot(slcdata,main="subset data",xlab="lon",ylab="lat")#
	}#
#
# import suspects#
slcsources=read.table("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/SteveFerrySuspectSitesInput.txt",header=FALSE)#
#____________________________________________________________________________#
# RUN MODEL#
#____________________________________________________________________________#
#
LoadData(slcdata,slcsources)#
#LoadData(slcdata)#
ModelParameters(sigma_expectation=0.01,Samples=10000,Delta=1)#
GraphicParameters(Location="",Guardrail = 0.05,pointcol="red")#
CreateMaps()
library(RgoogleMaps)
____________________________________________________________________________#
# IMPORT THE SHAPE FILE THAT WILL FORM THE BASIS OF THE ADJUSTMENT#
#____________________________________________________________________________#
library(spatial.tools)#
#
# temporarily set working directory to the location of the shape files#
setwd("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/2011_Census_Dundee_City_(shp)")#
#
# load shapfiles - shapfile first with extension, then layer#
#Conf_desa<- readOGR(".", "Conf_desa0115")#
DundeeCity <- readOGR(".", "WD_2011_EoR_Dundee_City")#
#Grid_conf <- readOGR(".", "grid_conflict0115")#
#Grid_desa <-readOGR('.', "grid_desa_all")#
#Farm <- readOGR(".", "des_farm_conf_DD")#
#
head(DundeeCity)
DundeeCity$GSS_CODEWD <- rep(1,length(DundeeCity$GSS_CODEWD))
##plot the shapefile#
plot(DundeeCity, axes=TRUE)#
#plot(Conf_desa, axes=TRUE)#
#plot(Grid_conf, axes=TRUE)#
#plot(Grid_desa, axes=TRUE)#
#plot(Farm, axes=TRUE)#
#
#set raster details, with matching extent#
r<-raster(ncol=300, nrow=300)#
extent(r)<-extent(DundeeCity)#
rf<- rasterize(DundeeCity, r, 'GSS_CODEWD')
# plot to check#
plot(r)#
class(rf)
DundeeCity$GSS_CODEWD
class(DundeeCity$GSS_CODEWD)
#____________________________________________________________________________#
# IMPORT THE SHAPE FILE THAT WILL FORM THE BASIS OF THE ADJUSTMENT#
#____________________________________________________________________________#
library(spatial.tools)#
#
# temporarily set working directory to the location of the shape files#
setwd("~/Dropbox/9 Shared/Work Shared/Cases/TIGER")#
#
# load shapfiles - shapfile first with extension, then layer#
#Conf_desa<- readOGR(".", "Conf_desa0115")#
Forest <- readOGR(".", "TNKS_forest")#
#Grid_conf <- readOGR(".", "grid_conflict0115")#
#Grid_desa <-readOGR('.', "grid_desa_all")#
#Farm <- readOGR(".", "des_farm_conf_DD")#
#
##plot the shapefile#
plot(Forest, axes=TRUE)
head(Forest)
#____________________________________________________________________________#
# IMPORT THE SHAPE FILE THAT WILL FORM THE BASIS OF THE ADJUSTMENT#
#____________________________________________________________________________#
library(spatial.tools)#
#
# temporarily set working directory to the location of the shape files#
setwd("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/2011_Census_Dundee_City_(shp)")#
#
# load shapfiles - shapfile first with extension, then layer#
#Conf_desa<- readOGR(".", "Conf_desa0115")#
DundeeCity <- readOGR(".", "WD_2011_EoR_Dundee_City")#
#Grid_conf <- readOGR(".", "grid_conflict0115")#
#Grid_desa <-readOGR('.', "grid_desa_all")#
#Farm <- readOGR(".", "des_farm_conf_DD")#
#
head(DundeeCity)#
DundeeCity$GSS_CODEWD <- rep(0,length(DundeeCity$GSS_CODEWD))#
#
##plot the shapefile#
plot(DundeeCity, axes=TRUE)#
#plot(Conf_desa, axes=TRUE)#
#plot(Grid_conf, axes=TRUE)#
#plot(Grid_desa, axes=TRUE)#
#plot(Farm, axes=TRUE)#
#
#set raster details, with matching extent#
r<-raster(ncol=300, nrow=300)#
extent(r)<-extent(DundeeCity)#
rf<- rasterize(DundeeCity, r, 'GSS_CODEWD')#
#
# plot to check#
plot(r)#
class(rf)
class(Forest)
class(DundeeCity)
Forest$AREA
class(Forest$AREA)
# temporarily set working directory to the location of the shape files#
setwd("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/2011_Census_Dundee_City_(shp)")#
#
# load shapfiles - shapfile first with extension, then layer#
#Conf_desa<- readOGR(".", "Conf_desa0115")#
DundeeCity <- readOGR(".", "WD_2011_EoR_Dundee_City")#
#Grid_conf <- readOGR(".", "grid_conflict0115")#
#Grid_desa <-readOGR('.', "grid_desa_all")#
#Farm <- readOGR(".", "des_farm_conf_DD")#
#
class(DundeeCity)#
head(DundeeCity)#
#
##plot the shapefile#
plot(DundeeCity, axes=TRUE)
#____________________________________________________________________________#
# IMPORT THE SHAPE FILE THAT WILL FORM THE BASIS OF THE ADJUSTMENT#
#____________________________________________________________________________#
library(spatial.tools)#
#
# temporarily set working directory to the location of the shape files#
setwd("~/Dropbox/9 Shared/Work Shared/Cases/SteveFerry/2011_Census_Dundee_City_(shp)")#
#
# load shapfiles - shapfile first with extension, then layer#
#Conf_desa<- readOGR(".", "Conf_desa0115")#
DundeeCity <- readOGR(".", "CA_2011_EoR_Dundee_City")#
#Grid_conf <- readOGR(".", "grid_conflict0115")#
#Grid_desa <-readOGR('.', "grid_desa_all")#
#Farm <- readOGR(".", "des_farm_conf_DD")#
#
class(DundeeCity)#
head(DundeeCity)
plot(DundeeCity, axes=TRUE)
rf<- rasterize(DundeeCity, r, 'HECTARES')
plot(r)
class(rf)
rf<- rasterize(DundeeCity, r, 'NONLD_AREA')
plot(r)
#set raster details, with matching extent#
r<-raster(ncol=300, nrow=300)#
extent(r)<-extent(DundeeCity)#
rf<- rasterize(DundeeCity, r, 'NONLD_AREA')#
#
# plot to check#
plot(r)
plot(rf)
#____________________________________________________________________________#
# MATCH EXTENT AND RESOLUTION OF SHAPE FILE AND RASTERISED GP#
#____________________________________________________________________________#
class(rf)#
class(my_raster)#
#
extent(rf)#
extent(my_raster)#
#
new_spatial_data_to_include <- projectRaster(rf, my_raster,crs="+proj=longlat +datum=WGS84")#
plot(new_spatial_data_to_include)#
#
# check extent of new data#
extent(new_spatial_data_to_include)#
# check extent of rasterised GP#
extent(my_raster)#
#
# set colours for rasterised contours#
colvec <<- c(heat.colors(50))#
#
# plot one raster on top of another to check#
plot(new_spatial_data_to_include,add=FALSE,col=c("red",NULL))#
#
plot(my_raster,col=colvec)#
plot(new_spatial_data_to_include,add=TRUE,col=c("red",NULL))#
# add points#
points(slcdata,col="black",pch=16)#
points(slcsources,col="blue",pch=15)
