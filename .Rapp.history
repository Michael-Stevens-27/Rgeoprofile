range(fake_hs)
# generate x y coords with fake hitscores and some structure#
xval <- runif(500,0,5)#
yval <- runif(500,0,5)#
fake_hs <- xval-yval#
range(fake_hs)
# number_of_colours#
coln <- 20#
#
gp.colors <- colorRampPalette(c("red", "yellow"))#
ringCols <- gp.colors(coln)#
#
# convert fake hs to integer from colour list#
fake_hs  <- fake_hs + abs(min(fake_hs))#
fake_hs  <- round(coln*(fake_hs / max(fake_hs)))#
range(fake_hs)
# basic with three colour palette#
#
library(RgoogleMaps)#
gp.colors <- colorRampPalette(c("lightgrey", "black"))#
ringCols <- gp.colors(10)#
plot(1:10, pch=16, col = ringCols)#
# generate x y coords with fake hitscores and some structure#
xval <- runif(500,0,5)#
yval <- runif(500,0,5)#
fake_hs <- xval+yval#
range(fake_hs)#
#
# number_of_colours#
coln <- 20#
#
gp.colors <- colorRampPalette(c("red", "yellow"))#
ringCols <- gp.colors(coln)#
#
# convert fake hs to integer from colour list#
fake_hs  <- fake_hs + abs(min(fake_hs))#
fake_hs  <- round(coln*(fake_hs / max(fake_hs)))#
range(fake_hs)#
plot(xval,yval,col= ringCols[fake_hs],pch=16)
data=read.table("~/Dropbox/2 Teaching/1 QM/Undergraduate/2017-18/BMD113 Human anatomy/Minitests/Minitest 4/anatomy 2017 mcq 4 results to import.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)#
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for mcq 3",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
data=read.table("~/Dropbox/2 Teaching/1 QM/Undergraduate/2017-18/BMD113 Human anatomy/Minitests/Minitest 4/anatomy 2017 mcq 4 results to import.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)#
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for mcq 4",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
8(8-2)
(1/(8*(8-2)))#
((8*49)-(49^2))#
((8*294)-(115-17))^2#
(8*1923)-115^2
(1/(8*(8-2)))*((8*49)-(49^2))
(((8*294)-(115-17))^2)/((8*1923)-115^2)
(1/(8*(8-2)))*((8*49)-(49^2))#
(((8*294)-(115-17))^2)/((8*1923)-115^2)
-41-85417-2353.18
((8*49)-(49^2))-((((8*294)-(115-17))^2)/((8*1923)-115^2))
(1/(8*(8-2)))#
((8*49)-(49^2))-((((8*294)-(115-17))^2)/((8*1923)-115^2))
(1/(8*(8-2)))*((8*49)-(49^2))-((((8*294)-(115-17))^2)/((8*1923)-115^2))
sum(cigs)^2
sum(cigs)#
sum(cigs)^2#
sum(cigs^2)#
#
sum(sick)#
sum(sick)^2#
sum(sick^2)
# q1#
xval <- c(2,7,3,7,5,3)#
yval <- c(4,12,7,14,11,5)#
mod1 <- lm(yval ~ xval)#
summary(mod1)#
plot(xval,yval)#
abline(mod1)#
cor(xval,yval)#
#
1.808/(3.72/1.98)#
# q2#
cigs <- c(11,10,26,15,9,16,20,8)#
sick <- c(1,1,5,3,2,2,2,1)#
mod2 <- lm(sick ~ cigs)#
summary(mod2)#
sum(cigs)#
sum(cigs)^2#
sum(cigs^2)#
#
sum(sick)#
sum(sick)^2#
sum(sick^2)
sum(cigs*sick)
sum(cigs)^2
(8*sum(cigs)^2)
(8*sum(cigs)^2)-sum(cigs)^2
(sum(cigs)*sum(sick))^2
((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)
(1/48)*((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)
# q2#
cigs <- c(11,10,26,15,9,16,20,8)#
sick <- c(1,1,5,3,2,2,2,1)#
mod2 <- lm(sick ~ cigs)#
summary(mod2)
1-0.7087^2
0.7087^2
sqrt(1-0.7087^2)
sd(cigs)
sqrt(1-0.7087^2)*sd(cigs)
sqrt(1-0.7087^2)*sd(sick)
sd(sick)
sd(cigs)*sqrt(1-0.7087^2)
sqrt(1-0.7087^2)
cigs
(1/48)
(1/48)*abs((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)
abs(((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2))
(1/48)*abs(((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2))
sqrt((1/48)*abs(((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)))
sick-mean(sick)
(sick-mean(sick))^2
sqrt((sick-mean(sick))^2)
sqrt((sick-mean(sick))^2) /  6 / sqrt((cigs-mean(cigs))^2)
sqrt((sick-mean(sick))^2) /  (6 / sqrt((cigs-mean(cigs))^2))
sqrt(sum(sick-mean(sick))^2) /  (6 / sqrt((cigs-mean(cigs))^2))
sqrt((sum(sick-mean(sick))^2) /  (6 / sqrt((cigs-mean(cigs))^2))
sick-mean(sick)
sum(sick-mean(sick))
(sick-mean(sick))^2
sum((sick-mean(sick))^2)
sum((sick-mean(sick))^2) /  6 / sqrt((cigs-mean(cigs))^2))
sqrt(sum((sick-mean(sick))^2)) /  6 / sqrt((cigs-mean(cigs))^2))
sqrt(sum((sick-mean(sick))^2)/6)
sqrt((cigs-mean(cigs))^2))
(cigs-mean(cigs))^2)
cigs-mean(cigs)
sum(cigs-mean(cigs)^2)
sqrt(sum(cigs-mean(cigs)^2))
(cigs-mean(cigs)^2)
sum(cigs-mean(cigs)^2)
cigs-mean(cigs)
(cigs-mean(cigs))^2)
sqrt(sum((cigs-mean(cigs))^2)
sqrt(sum(cigs-mean(cigs))^2)
sqrt(sum((cigs-mean(cigs))^2))
sqrt(sum((sick-mean(sick))^2)/6)
sqrt(sum((sick-mean(sick))^2)/6) /  sqrt(sum((cigs-mean(cigs))^2))
sqrt(sum((cigs-mean(cigs))^2))
sqrt((1/48)
sqrt(1/48)
8*sum(cigs)^2)-sum(cigs)^2
8*sum(cigs^2)
8*sum(cigs^2) - sum(cigs)^2
(sum(cigs*sick)^2)
cigs*sick
(sum(cigs*sick)
sum(cigs*sick)
8*(sum(cigs*sick)^2)
1/48
8*sum(cigs^2) - sum(cigs)^2
8*(sum(cigs*sick))
sum(cigs*sick)
8*(sum(cigs*sick))
sum(cigs)*sum(sick)
(8*sum(sick^2)
8*sum(sick^2)
sum(sick)^2
2352-1955
397^2
(8*sum(sick^2)-sum(sick)^2)))
8*sum(sick^2)-sum(sick)^2)))
8*sum(sick^2)-sum(sick)^2)
8*sum(sick^2)
sum(sick)^2
392-289
15609/103
2159-(15609/103)
2007.456*0.0208
sqrt(2007.456*0.0208)
summary(mod2)
a <- 1/48
sum(cigs^2)
8*sum(cigs^2)
sum(cigs)^2
b <- 8*sum(cigs^2) - sum(cigs)^2
b
a
sum(cigs*sick)
sum(cigs)*sum(sick)
top <- (8*(sum(cigs*sick)) - sum(cigs)*sum(sick))^2
top
8*sum(sick^2)-sum(sick)^2)
(8*sum(sick^2))
sum(sick)^2
bottom <- (8*sum(sick^2))-sum(sick)^2
bottom
b - (top/bottom)
a*(b - (top/bottom))
sqrt((a*(b - (top/bottom))))
614-35
1694-150
apple1 <- rnorm(10000,-5,1)#
apple2 <- rnorm(10000,-5,5)#
cs1 <- rnorm(10000,-2,1)#
cs2 <- rnorm(10000,2,1)#
hist(c(apple1,cs1,cs2),breaks = seq(-30,30,0.1))#
quartz()#
hist(c(apple2,cs1,cs2),breaks = seq(-30,30,0.1))#
curve(x^2,-10,10)#
#
curve(dnorm,-10,10)#
curve(function(x) dnorm,-10,10)#
par(mfrow=c(2,1))#
curve(dnorm(x, -2, 1), col="gray", from=-30,to=30,ylim=c(0,0.5),xlab="location",ylab="p",n=600)#
curve(dnorm(x, 2, 1), col="gray", n=600,add=TRUE)#
curve(dnorm(x, -5, 1), col="blue", n=600,add=TRUE)#
curve(1500000*dnorm(x, -2, 1)*dnorm(x, 2, 1)*dnorm(x, -5, 1), col="red", n=600,add=TRUE)#
text(-5,0.03,"a")#
text(-2,0.03,"cs")#
text(2,0.03,"cs")#
#
curve(dnorm(x, -2, 1), col="gray", from=-30,to=30,ylim=c(0,0.5),xlab="location",ylab="p",n=600)#
curve(dnorm(x, 2, 1), col="gray", n=600,add=TRUE)#
curve(dnorm(x, -5, 5), col="blue", n=600,add=TRUE)#
curve(3000 * dnorm(x, -2, 1)*dnorm(x, 2, 1)*dnorm(x, -5, 5), col="red", n=600,add=TRUE)#
text(-5,0.03,"a")#
text(-2,0.03,"cs")#
text(2,0.03,"cs")
library(rmeta)#
data(cochrane)#
#
model.FE <- meta.MH(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=cochrane)#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=cochrane)#
#
summary(model.RE)#
plot(model.RE)
funnel.plot(model.RE)
funnelplot(model.RE)
summary(model.RE)
plot(model.RE)
(54.1/27.8)*100
(54/27.8)*100
(132/34.1)*100
#______________________________________#
# MMR EFFECTIVENESS AGAINST MEASLES#
#______________________________________#
#
rm(list=ls())#
library(rmeta)#
measles <- read.table("~/Desktop/Dropbox/MMRvsMeasles.txt",header=TRUE)#
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
rm(list=ls())#
library(rmeta)
measles <- read.table("~/Desktop/Dropbox/MMRvsMeasles.txt",header=TRUE)
measles <- read.table("~/Desktop/MMRvsMeasles.txt",header=TRUE)
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
2/12906
(2/12906)/(114/22188)
library(rmeta)#
measles <- read.table("~/Desktop/MMRvsMeasles.txt",header=TRUE)#
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
#______________________________________#
# MMR EFFECTIVENESS AGAINST MEASLES#
#______________________________________#
rm(list=ls())#
library(rmeta)#
measles <- read.table("~/Desktop/MMRvsMeasles.txt",header=TRUE)#
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
xval <- c(2,7,3,7,5,3)#
yval <- c(4,12,7,14,11,5)
1/(np(np-2))
np <- length(xval)#
1/(np(np-2))
1/(np*(np-2))
np*(sum(xval^2))
sum(xval^2)
sum(xval)^2
xval*yval
sum(xval*yval)
sum(xval)
sum(yval)
sum(xval*yval)
sum(yval)^2
1/24
np*(sum(xval^2))#
sum(xval)^2
sum(xval*yval)
sum(xval)#
sum(yval)
sum(yval^2)
sum(yval)^2
((6*281)-(27*53))^2
(6*551)-2809
sqrt((1/24)*(141-(65025/497)))
65025/497
(141-(65025/497))
sqrt(10.17)
(1/24)*(141-(65025/497))
sqrt((1/24)*(141-(65025/497)))
6*145
np*(sum(xval^2))
sum(xval)^2
np*sum(xval*yval)-sum(xval)*sum(yval)
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2
sum(yval)
sum(xval)^2
sum(yval^2)
term1 <- 1/(np*(np-2))#
term2a <- np*(sum(xval^2))#
term2b <- sum(xval)^2#
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2#
term3denom <- np*sum(yval^2) - sum(yval)^2#
complete <- sqrt(term1 - term 2 - (term3num/term3denom))
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2
term3denom <- np*sum(yval^2) - sum(yval)^2
term3num
term3denom
term3num/term3denom
term1 - term 2 - (term3num/term3denom)
complete <- sqrt(term1 - term2 - (term3num/term3denom))
term1 *  (term2a - term2b - (term3num/term3denom))
term1 <- 1/(np*(np-2))#
term2a <- np*(sum(xval^2))#
term2b <- sum(xval)^2#
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2#
term3denom <- np*sum(yval^2) - sum(yval)^2#
complete <- sqrt(term1 *  (term2a - term2b - (term3num/term3denom)))#
complete
34/72
34/57
data=read.table("~/Dropbox/2 Teaching/1 QM/Undergraduate/2017-18/BMD113 Human anatomy/Practicals/Practical 4/BMD113Practical4Import2017.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for practical 4",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,100))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for practical 4",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))
data=read.table("~/Desktop/BMD113WeightedImport2017.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)#
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for practical 4",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
data=read.table("~/Desktop/BMD113WeightedImport2017.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)#
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="weighted coursework grades",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
library(devtools)
document()
library(devtools)
document()
library(RgeoProfile)#
path <- "~/GitHub/Rgeoprofile"#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
# John Snow cholera datadata(Cholera)d <- geoData(Cholera[,1],Cholera[,2])data(WaterPumps)s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2)m <- geoMCMC(data = d, params = p, lambda=0.05)# produce simple mapgeoPlotMapText(params = p, data = d, source = s, crimeNames = NULL, sourceNames = letters[1:13], surface = m$geoProfile, crimeCol = "black", crimeCex = 2, sourceCol = "red", sourceCex = 2)
geoPlotMapText <- function (params, data = NULL, source = NULL, crimeNames = NULL, sourceNames = NULL, surface = NULL, #
    zoom = NULL, mapSource = "google", mapType = "hybrid", opacity = 0.6, #
    plotContours = TRUE, breakPercent = seq(0, 100, l = 11), #
    contourCols = c("red", "orange", "yellow", "white"), crimeCex = 1.5, #
    crimeCol = "red", crimeBorderCol = "white", crimeBorderWidth = 0.5, #
    sourceCex = 1.5, sourceCol = "blue", gpLegend = TRUE) #
{#
    geoParamsCheck(params)#
    if (!is.null(data)) #
        geoDataCheck(data)#
    if (is.null(zoom)) #
        zoom <- getZoom(params$output$longitude_minMax, params$output$latitude_minMax)#
    if (mapSource == "stamen") #
        zoom <- min(zoom, 18)#
    rawMap <- get_map(location = c(mean(params$output$longitude_minMax), #
        mean(params$output$latitude_minMax)), zoom = zoom, source = mapSource, #
        maptype = mapType)#
    myMap <- ggmap(rawMap) + coord_cartesian(xlim = params$output$longitude_minMax, #
        ylim = params$output$latitude_minMax)#
    if (!is.null(surface)) {#
        geoCols <- colorRampPalette(contourCols)#
        nbcol = length(breakPercent) - 1#
        longitude_minMax <- params$output$longitude_minMax#
        latitude_minMax <- params$output$latitude_minMax#
        longitude_cells <- params$output$longitude_cells#
        latitude_cells <- params$output$latitude_cells#
        longitude_cellSize <- diff(longitude_minMax)/longitude_cells#
        latitude_cellSize <- diff(latitude_minMax)/latitude_cells#
        longitude_midpoints <- longitude_minMax[1] - longitude_cellSize/2 + #
            (1:longitude_cells) * longitude_cellSize#
        latitude_midpoints <- latitude_minMax[1] - latitude_cellSize/2 + #
            (1:latitude_cells) * latitude_cellSize#
        df <- expand.grid(x = longitude_midpoints, y = latitude_midpoints)#
        df$z <- as.vector(t(surface))#
        labs <- paste(round(breakPercent, 1)[-length(breakPercent)], #
            "-", round(breakPercent, 1)[-1], "%", sep = "")#
        df$cut <- cut(df$z, breakPercent/100 * length(surface), #
            labels = labs)#
        df_noNA <- df[!is.na(df$cut), ]#
        myMap <- myMap + geom_tile(aes(x = x, y = y, fill = cut), #
            alpha = opacity, data = df_noNA)#
        myMap <- myMap + scale_fill_manual(name = "Hitscore\npercentage", #
            values = rev(geoCols(nbcol)))#
        if (gpLegend == FALSE) {#
            myMap <- myMap + theme(legend.position = "none")#
        }#
        if (plotContours) {#
            myMap <- myMap + stat_contour(aes(x = x, y = y, z = z), #
                colour = "grey50", breaks = breakPercent/100 * #
                  length(surface), size = 0.3, alpha = opacity, #
                data = df)#
        }#
    }#
    	if (is.null(crimeNames)) {crimeNames = 1:length(data$longitude)}#
    if (!is.null(data)) {#
        df_data <- data.frame(longitude = data$longitude, latitude = data$latitude,ptno=crimeNames)#
        df_data$ptno <- crimeNames#
        myMap <- myMap + geom_text(aes(x = longitude, y = latitude, label = ptno), #
            data = df_data, cex = crimeCex,col=crimeCol)#
    }#
    	if (is.null(sourceNames)) {sourceNames = 1:length(source$source_longitude)}#
      if (!is.null(source)) {#
        df_source <- data.frame(longitude = source$source_longitude, #
            latitude = source$source_latitude,sourceNames)#
        df_source$sptno <- sourceNames#
        myMap <- myMap + geom_text(aes(x = longitude, y = latitude, label = sptno), #
            data = df_source, cex = sourceCex, col = sourceCol)  #
    }#
    myMap#
}#
#
myNames <- read.table("~/Dropbox/10 R code/geoPlotMapText/testnames.txt",header=FALSE)#
mySources <- LETTERS[1:8]#
#
mySources <- c("Morlich Gardens","Cedar Grove")#
myNames <- c("Grove","Forthill","JLC","Fishermans","Royal Arch","Vissocchi's","Fiona","G&S1","G&S2","RSMcColl","VG")#
geoPlotMapText(data = d, source = s, sourceNames = mySources,params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)#
#
geoPlotMapText(data = d, source = s, crimeNames = myNames, sourceNames = mySources, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)#
#
geoPlotMapText(data = d, source = s, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText
geoPlotMapText(data = d, source = s, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText(data = d, source = s, sourceNames = mySources,params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText(data = d, source = s, crimeNames = myNames, sourceNames = mySources, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText(data = d, source = s, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
library(RgeoProfile)
getZoom
library(devtools)
document()
library(devtools)#
document()
document()
library(devtools)
document()
library(RgeoProfile)#
path <- "~/GitHub/Rgeoprofile"#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
document()
library(devtools)
document()
library(devtools)
install_github("bobverity/Rgeoprofile",ref="develop",force=TRUE)
library(RgeoProfile)
?geoPlotMap
?geoSmooth
?RgeoProfile
# ------------------------------------------------------------------#
# IMPORT DATA AND SET PARAMETERS#
# ------------------------------------------------------------------#
# choose data and sources from options above#
# d <- LondonExample_crimes#
# s <- LondonExample_sources#
#
# load real data#
crime_data <- read.table("~/Dropbox/9 Shared/SLC shared/2 Cases/Cairo/Cairo 2014/MalariaCases139.txt", header = FALSE)#
source_data <- read.table("~/Dropbox/9 Shared/SLC shared/2 Cases/Cairo/Cairo 2014/allvectors.txt", header = FALSE)#
#
d <- geoData(crime_data[,1], crime_data[,2])#
s <- geoDataSource(source_data[,1], source_data[,2])#
# set model and MCMC parameters#
p = geoParams(data = d, sigma_mean = 1.8, sigma_var = 0, sigma_squared_shape = NULL, chains = 5, burnin = 1e3, samples = 1e4, longitude_cells = 200, latitude_cells = 200)#
#
# initial map of data#
# Note that geoPlotMap may occasionally fail to download map. In this case simply run again until it passes#
# Note also that plotting the map may take quite a long time#
# map1 <- geoPlotMap(params = p, data = d, source = s)#
# map1#
#
# plot prior on sigma#
# geoPlotSigma(params = p)#
#
# ------------------------------------------------------------------#
# RUN MCMC#
# ------------------------------------------------------------------#
# run MCMC#
m = geoMCMC(data = d, params = p)#
#
# ------------------------------------------------------------------#
# MAIN DPM OUTPUT#
# ------------------------------------------------------------------#
# plot prior and posterior of sigma#
geoPlotSigma(params = p, mcmc = m)#
abline(v = sigma, col = 2)#
#
# plot profile on map#
map2 <- geoPlotMap(params = p, data = d, source = s, surface = m$geoProfile, mapSource = "google", mapType = "roadmap", breakPercent = seq(0,50,l=11), opacity=0.8, plotContours = TRUE, smoothScale = TRUE, sourceCex = 3, crimeCex = 3)#
map2
# add labels to all points, checking for overlaps#
library(ggplot2)#
my_labels <- 1:length(d$longitude)#
labelled_map <- map2 + geom_text(aes(x = d$longitude, y = d$latitude, label = my_labels),nudge_x = 0, nudge_y = 0.007, check_overlap = T, size = 3)#
labelled_map
# add labels to particular points#
my_labels <- rep(NA,length(d$longitude))#
my_labels[112] <- "this one"#
my_labels[139] <- "that one"#
labelled_map2 <- map2 + geom_text(aes(x = d$longitude, y = d$latitude, label = my_labels),nudge_x = 0, nudge_y = 0.007, check_overlap = T, size = 3)#
labelled_map2
# zoom#
map3 <- geoPlotMap(lonLimits = c(31.21, 31.35), latLimits = c(29.98, 30.05), params = p, data = d, source = s, surface = m$geoProfile, breakPercent = seq(0,50,l=11), opacity = 0.8)#
map3
# zoom#
map3 <- geoPlotMap(lonLimits = c(31.21, 31.35), latLimits = c(29.98, 30.05), params = p, data = d, source = s, surface = m$geoProfile, breakPercent = seq(0,50,l=11), opacity = 0.8)#
map3
# set master zoom values if required#
zoomLon = c(31.21, 31.35)#
zoomLat = c(29.98, 30.05)
# zoom#
map3 <- geoPlotMap(lonLimits = zoomLon, latLimits = zoomLat, params = p, data = d, source = s, surface = m$geoProfile, breakPercent = seq(0,50,l=11), opacity = 0.8)#
map3
# get hitscores#
hs <- geoReportHitscores(params = p, source = s, surface =m$geoProfile)#
hs
# produce Lorenz plot#
Gini <- geoPlotLorenz(hit_scores = hs)#
Gini
# ------------------------------------------------------------------#
# RING SEARCH#
# ------------------------------------------------------------------#
# compare to geoprofile based on ring search strategy#
surface_ring <- geoRing(params = p, data = d, source = s, mcmc = m)#
gp_ring <- geoProfile(surface = surface_ring)#
#
# map of ring search geoprofile#
map4 <- geoPlotMap(params = p, data = d, source = s, surface = gp_ring, opacity = 1, breakPercent = seq(0,50,l=11))#
map4
# zoom map of ring search geoprofile#
map4z <- geoPlotMap(lonLimits = zoomLon, latLimits = zoomLat, params = p, data = d, source = s, surface = gp_ring, opacity = 0.8, breakPercent = seq(0,50,l=11))#
map4z#
#
# hitscores of ring search geoprofile#
hs_ring <- geoReportHitscores(params = p, source = s, surface = gp_ring)#
hs_ring
Gini <- geoPlotLorenz(hit_scores = hs_ring)#
Gini
# ------------------------------------------------------------------#
# OTHER OUTPUT#
# ------------------------------------------------------------------#
# plot allocation#
geoPlotAllocation(mcmc = m)#
#
# plot co-allocation#
geoPlotCoallocation(mcmc = m)#
#
# produce perspective plot#
geoPersp(surface = m$geoProfile, aggregate_size = 1)#
#
# find centroids of data split by best grouping (placeholder for more thorough method)#
geoModelSources(mcmc = m, data = d)#
#
# unknown pleasures#
unknownPleasures(m$geoProfile, paper_ref = NULL, nlines = 80,#
  bgcol = "black", fgcol = "white", wt = 2)
unknownPleasures(m$geoProfile, paper_ref = "RgeoProfile 2.1.0", nlines = 80,
unknownPleasures(m$geoProfile, paper_ref = "RgeoProfile 2.1.0", nlines = 80, bgcol = "black", fgcol = "white", wt = 2)
# ------------------------------------------------------------------#
# SHAPE FILE#
# ------------------------------------------------------------------#
# read in shapefile as mask#
setwd("~/Dropbox/9 Shared/SLC shared/3 Shapefiles/cairo_egypt.imposm-shapefiles")#
mask <- geoShapefile("cairo_egypt_osm_waterareas.shp")#
#
# mask posterior surface and geoprofile#
prob_masked <- geoMask(m$posteriorSurface, params = p, mask = mask, operation = "near",  scaleValue = 0.5)#
gp_masked <- geoProfile(prob_masked$prob)
# plot masked map#
map5 <- geoPlotMap(params = p, data = d, source= s, surface=gp_masked, opacity=0.6, breakPercent = seq(0, 100, l = 11))#
map5
# hs of masked surface#
hs_mask <- geoReportHitscores(params = p, source = s, surface = gp_masked)#
hs_mask#
#
# zoom masked map#
map5z <- geoPlotMap(lonLimits = zoomLon, latLimits = zoomLat, params = p, data = d, source= s, surface=gp_masked, opacity=0.8)#
map5z
boxplot(hs[,3], hs_ring[,3], hs_mask[,3], names = c("DPM", "ring", "DPM mask"), ylab = "hs (%)")
map5z
labelled_map
map3
setwd("~/GitHub/Rgeoprofile")
devtools::check()
labelled_map
# add labels to all points, checking for overlaps#
#library(ggplot2)#
my_labels <- 1:length(d$longitude)#
labelled_map <- map2 + geom_text(aes(x = d$longitude, y = d$latitude, label = my_labels),nudge_x = 0, nudge_y = 0.007, check_overlap = T, size = 3)#
labelled_map
?geoPlotMap
