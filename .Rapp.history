(1/(8*(8-2)))*((8*49)-(49^2))-((((8*294)-(115-17))^2)/((8*1923)-115^2))
sum(cigs)^2
sum(cigs)#
sum(cigs)^2#
sum(cigs^2)#
#
sum(sick)#
sum(sick)^2#
sum(sick^2)
# q1#
xval <- c(2,7,3,7,5,3)#
yval <- c(4,12,7,14,11,5)#
mod1 <- lm(yval ~ xval)#
summary(mod1)#
plot(xval,yval)#
abline(mod1)#
cor(xval,yval)#
#
1.808/(3.72/1.98)#
# q2#
cigs <- c(11,10,26,15,9,16,20,8)#
sick <- c(1,1,5,3,2,2,2,1)#
mod2 <- lm(sick ~ cigs)#
summary(mod2)#
sum(cigs)#
sum(cigs)^2#
sum(cigs^2)#
#
sum(sick)#
sum(sick)^2#
sum(sick^2)
sum(cigs*sick)
sum(cigs)^2
(8*sum(cigs)^2)
(8*sum(cigs)^2)-sum(cigs)^2
(sum(cigs)*sum(sick))^2
((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)
(1/48)*((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)
# q2#
cigs <- c(11,10,26,15,9,16,20,8)#
sick <- c(1,1,5,3,2,2,2,1)#
mod2 <- lm(sick ~ cigs)#
summary(mod2)
1-0.7087^2
0.7087^2
sqrt(1-0.7087^2)
sd(cigs)
sqrt(1-0.7087^2)*sd(cigs)
sqrt(1-0.7087^2)*sd(sick)
sd(sick)
sd(cigs)*sqrt(1-0.7087^2)
sqrt(1-0.7087^2)
cigs
(1/48)
(1/48)*abs((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)
abs(((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2))
(1/48)*abs(((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2))
sqrt((1/48)*abs(((8*sum(cigs)^2)-sum(cigs)^2)  -   (8*sum(cigs*sick))  -  ((sum(cigs)*sum(sick))^2)/(8*sum(sick^2)-sum(sick)^2)))
sick-mean(sick)
(sick-mean(sick))^2
sqrt((sick-mean(sick))^2)
sqrt((sick-mean(sick))^2) /  6 / sqrt((cigs-mean(cigs))^2)
sqrt((sick-mean(sick))^2) /  (6 / sqrt((cigs-mean(cigs))^2))
sqrt(sum(sick-mean(sick))^2) /  (6 / sqrt((cigs-mean(cigs))^2))
sqrt((sum(sick-mean(sick))^2) /  (6 / sqrt((cigs-mean(cigs))^2))
sick-mean(sick)
sum(sick-mean(sick))
(sick-mean(sick))^2
sum((sick-mean(sick))^2)
sum((sick-mean(sick))^2) /  6 / sqrt((cigs-mean(cigs))^2))
sqrt(sum((sick-mean(sick))^2)) /  6 / sqrt((cigs-mean(cigs))^2))
sqrt(sum((sick-mean(sick))^2)/6)
sqrt((cigs-mean(cigs))^2))
(cigs-mean(cigs))^2)
cigs-mean(cigs)
sum(cigs-mean(cigs)^2)
sqrt(sum(cigs-mean(cigs)^2))
(cigs-mean(cigs)^2)
sum(cigs-mean(cigs)^2)
cigs-mean(cigs)
(cigs-mean(cigs))^2)
sqrt(sum((cigs-mean(cigs))^2)
sqrt(sum(cigs-mean(cigs))^2)
sqrt(sum((cigs-mean(cigs))^2))
sqrt(sum((sick-mean(sick))^2)/6)
sqrt(sum((sick-mean(sick))^2)/6) /  sqrt(sum((cigs-mean(cigs))^2))
sqrt(sum((cigs-mean(cigs))^2))
sqrt((1/48)
sqrt(1/48)
8*sum(cigs)^2)-sum(cigs)^2
8*sum(cigs^2)
8*sum(cigs^2) - sum(cigs)^2
(sum(cigs*sick)^2)
cigs*sick
(sum(cigs*sick)
sum(cigs*sick)
8*(sum(cigs*sick)^2)
1/48
8*sum(cigs^2) - sum(cigs)^2
8*(sum(cigs*sick))
sum(cigs*sick)
8*(sum(cigs*sick))
sum(cigs)*sum(sick)
(8*sum(sick^2)
8*sum(sick^2)
sum(sick)^2
2352-1955
397^2
(8*sum(sick^2)-sum(sick)^2)))
8*sum(sick^2)-sum(sick)^2)))
8*sum(sick^2)-sum(sick)^2)
8*sum(sick^2)
sum(sick)^2
392-289
15609/103
2159-(15609/103)
2007.456*0.0208
sqrt(2007.456*0.0208)
summary(mod2)
a <- 1/48
sum(cigs^2)
8*sum(cigs^2)
sum(cigs)^2
b <- 8*sum(cigs^2) - sum(cigs)^2
b
a
sum(cigs*sick)
sum(cigs)*sum(sick)
top <- (8*(sum(cigs*sick)) - sum(cigs)*sum(sick))^2
top
8*sum(sick^2)-sum(sick)^2)
(8*sum(sick^2))
sum(sick)^2
bottom <- (8*sum(sick^2))-sum(sick)^2
bottom
b - (top/bottom)
a*(b - (top/bottom))
sqrt((a*(b - (top/bottom))))
614-35
1694-150
apple1 <- rnorm(10000,-5,1)#
apple2 <- rnorm(10000,-5,5)#
cs1 <- rnorm(10000,-2,1)#
cs2 <- rnorm(10000,2,1)#
hist(c(apple1,cs1,cs2),breaks = seq(-30,30,0.1))#
quartz()#
hist(c(apple2,cs1,cs2),breaks = seq(-30,30,0.1))#
curve(x^2,-10,10)#
#
curve(dnorm,-10,10)#
curve(function(x) dnorm,-10,10)#
par(mfrow=c(2,1))#
curve(dnorm(x, -2, 1), col="gray", from=-30,to=30,ylim=c(0,0.5),xlab="location",ylab="p",n=600)#
curve(dnorm(x, 2, 1), col="gray", n=600,add=TRUE)#
curve(dnorm(x, -5, 1), col="blue", n=600,add=TRUE)#
curve(1500000*dnorm(x, -2, 1)*dnorm(x, 2, 1)*dnorm(x, -5, 1), col="red", n=600,add=TRUE)#
text(-5,0.03,"a")#
text(-2,0.03,"cs")#
text(2,0.03,"cs")#
#
curve(dnorm(x, -2, 1), col="gray", from=-30,to=30,ylim=c(0,0.5),xlab="location",ylab="p",n=600)#
curve(dnorm(x, 2, 1), col="gray", n=600,add=TRUE)#
curve(dnorm(x, -5, 5), col="blue", n=600,add=TRUE)#
curve(3000 * dnorm(x, -2, 1)*dnorm(x, 2, 1)*dnorm(x, -5, 5), col="red", n=600,add=TRUE)#
text(-5,0.03,"a")#
text(-2,0.03,"cs")#
text(2,0.03,"cs")
library(rmeta)#
data(cochrane)#
#
model.FE <- meta.MH(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=cochrane)#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=cochrane)#
#
summary(model.RE)#
plot(model.RE)
funnel.plot(model.RE)
funnelplot(model.RE)
summary(model.RE)
plot(model.RE)
(54.1/27.8)*100
(54/27.8)*100
(132/34.1)*100
#______________________________________#
# MMR EFFECTIVENESS AGAINST MEASLES#
#______________________________________#
#
rm(list=ls())#
library(rmeta)#
measles <- read.table("~/Desktop/Dropbox/MMRvsMeasles.txt",header=TRUE)#
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
rm(list=ls())#
library(rmeta)
measles <- read.table("~/Desktop/Dropbox/MMRvsMeasles.txt",header=TRUE)
measles <- read.table("~/Desktop/MMRvsMeasles.txt",header=TRUE)
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
2/12906
(2/12906)/(114/22188)
library(rmeta)#
measles <- read.table("~/Desktop/MMRvsMeasles.txt",header=TRUE)#
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
#______________________________________#
# MMR EFFECTIVENESS AGAINST MEASLES#
#______________________________________#
rm(list=ls())#
library(rmeta)#
measles <- read.table("~/Desktop/MMRvsMeasles.txt",header=TRUE)#
attach(measles)#
measles#
model.RE <- meta.DSL(n.trt,n.ctrl,ev.trt,ev.ctrl, names=name,data=measles)#
summary(model.RE)#
plot(model.RE)
xval <- c(2,7,3,7,5,3)#
yval <- c(4,12,7,14,11,5)
1/(np(np-2))
np <- length(xval)#
1/(np(np-2))
1/(np*(np-2))
np*(sum(xval^2))
sum(xval^2)
sum(xval)^2
xval*yval
sum(xval*yval)
sum(xval)
sum(yval)
sum(xval*yval)
sum(yval)^2
1/24
np*(sum(xval^2))#
sum(xval)^2
sum(xval*yval)
sum(xval)#
sum(yval)
sum(yval^2)
sum(yval)^2
((6*281)-(27*53))^2
(6*551)-2809
sqrt((1/24)*(141-(65025/497)))
65025/497
(141-(65025/497))
sqrt(10.17)
(1/24)*(141-(65025/497))
sqrt((1/24)*(141-(65025/497)))
6*145
np*(sum(xval^2))
sum(xval)^2
np*sum(xval*yval)-sum(xval)*sum(yval)
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2
sum(yval)
sum(xval)^2
sum(yval^2)
term1 <- 1/(np*(np-2))#
term2a <- np*(sum(xval^2))#
term2b <- sum(xval)^2#
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2#
term3denom <- np*sum(yval^2) - sum(yval)^2#
complete <- sqrt(term1 - term 2 - (term3num/term3denom))
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2
term3denom <- np*sum(yval^2) - sum(yval)^2
term3num
term3denom
term3num/term3denom
term1 - term 2 - (term3num/term3denom)
complete <- sqrt(term1 - term2 - (term3num/term3denom))
term1 *  (term2a - term2b - (term3num/term3denom))
term1 <- 1/(np*(np-2))#
term2a <- np*(sum(xval^2))#
term2b <- sum(xval)^2#
term3num <- (np*sum(xval*yval)-sum(xval)*sum(yval))^2#
term3denom <- np*sum(yval^2) - sum(yval)^2#
complete <- sqrt(term1 *  (term2a - term2b - (term3num/term3denom)))#
complete
34/72
34/57
data=read.table("~/Dropbox/2 Teaching/1 QM/Undergraduate/2017-18/BMD113 Human anatomy/Practicals/Practical 4/BMD113Practical4Import2017.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for practical 4",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,100))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for practical 4",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))
data=read.table("~/Desktop/BMD113WeightedImport2017.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)#
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="marks and grades for practical 4",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
data=read.table("~/Desktop/BMD113WeightedImport2017.txt",header=F)#
data=data[,1]#
class(data)#
hist(data)#
range(data)#
hist(data,breaks=c(0,40,45,50,60,70,100),labels=c("F","E","D","C","B","A"),xlab="mark",ylab="frequency",main="weighted coursework grades",col=c("red","white","white","white","white","white"),freq=TRUE,ylim=c(0,80))#
#
summary(data)#
length(data)#
sd(data)#
# sort(data)#
#
#plot(sort(data))#
length(which(data>=70))#
length(which(data>=60 & data<70))#
length(which(data>=50 & data<60))#
length(which(data>=45 & data<50))#
length(which(data>=40 & data<45))#
length(which(data<40))
library(devtools)
document()
library(devtools)
document()
library(RgeoProfile)#
path <- "~/GitHub/Rgeoprofile"#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
# John Snow cholera datadata(Cholera)d <- geoData(Cholera[,1],Cholera[,2])data(WaterPumps)s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2)m <- geoMCMC(data = d, params = p, lambda=0.05)# produce simple mapgeoPlotMapText(params = p, data = d, source = s, crimeNames = NULL, sourceNames = letters[1:13], surface = m$geoProfile, crimeCol = "black", crimeCex = 2, sourceCol = "red", sourceCex = 2)
geoPlotMapText <- function (params, data = NULL, source = NULL, crimeNames = NULL, sourceNames = NULL, surface = NULL, #
    zoom = NULL, mapSource = "google", mapType = "hybrid", opacity = 0.6, #
    plotContours = TRUE, breakPercent = seq(0, 100, l = 11), #
    contourCols = c("red", "orange", "yellow", "white"), crimeCex = 1.5, #
    crimeCol = "red", crimeBorderCol = "white", crimeBorderWidth = 0.5, #
    sourceCex = 1.5, sourceCol = "blue", gpLegend = TRUE) #
{#
    geoParamsCheck(params)#
    if (!is.null(data)) #
        geoDataCheck(data)#
    if (is.null(zoom)) #
        zoom <- getZoom(params$output$longitude_minMax, params$output$latitude_minMax)#
    if (mapSource == "stamen") #
        zoom <- min(zoom, 18)#
    rawMap <- get_map(location = c(mean(params$output$longitude_minMax), #
        mean(params$output$latitude_minMax)), zoom = zoom, source = mapSource, #
        maptype = mapType)#
    myMap <- ggmap(rawMap) + coord_cartesian(xlim = params$output$longitude_minMax, #
        ylim = params$output$latitude_minMax)#
    if (!is.null(surface)) {#
        geoCols <- colorRampPalette(contourCols)#
        nbcol = length(breakPercent) - 1#
        longitude_minMax <- params$output$longitude_minMax#
        latitude_minMax <- params$output$latitude_minMax#
        longitude_cells <- params$output$longitude_cells#
        latitude_cells <- params$output$latitude_cells#
        longitude_cellSize <- diff(longitude_minMax)/longitude_cells#
        latitude_cellSize <- diff(latitude_minMax)/latitude_cells#
        longitude_midpoints <- longitude_minMax[1] - longitude_cellSize/2 + #
            (1:longitude_cells) * longitude_cellSize#
        latitude_midpoints <- latitude_minMax[1] - latitude_cellSize/2 + #
            (1:latitude_cells) * latitude_cellSize#
        df <- expand.grid(x = longitude_midpoints, y = latitude_midpoints)#
        df$z <- as.vector(t(surface))#
        labs <- paste(round(breakPercent, 1)[-length(breakPercent)], #
            "-", round(breakPercent, 1)[-1], "%", sep = "")#
        df$cut <- cut(df$z, breakPercent/100 * length(surface), #
            labels = labs)#
        df_noNA <- df[!is.na(df$cut), ]#
        myMap <- myMap + geom_tile(aes(x = x, y = y, fill = cut), #
            alpha = opacity, data = df_noNA)#
        myMap <- myMap + scale_fill_manual(name = "Hitscore\npercentage", #
            values = rev(geoCols(nbcol)))#
        if (gpLegend == FALSE) {#
            myMap <- myMap + theme(legend.position = "none")#
        }#
        if (plotContours) {#
            myMap <- myMap + stat_contour(aes(x = x, y = y, z = z), #
                colour = "grey50", breaks = breakPercent/100 * #
                  length(surface), size = 0.3, alpha = opacity, #
                data = df)#
        }#
    }#
    	if (is.null(crimeNames)) {crimeNames = 1:length(data$longitude)}#
    if (!is.null(data)) {#
        df_data <- data.frame(longitude = data$longitude, latitude = data$latitude,ptno=crimeNames)#
        df_data$ptno <- crimeNames#
        myMap <- myMap + geom_text(aes(x = longitude, y = latitude, label = ptno), #
            data = df_data, cex = crimeCex,col=crimeCol)#
    }#
    	if (is.null(sourceNames)) {sourceNames = 1:length(source$source_longitude)}#
      if (!is.null(source)) {#
        df_source <- data.frame(longitude = source$source_longitude, #
            latitude = source$source_latitude,sourceNames)#
        df_source$sptno <- sourceNames#
        myMap <- myMap + geom_text(aes(x = longitude, y = latitude, label = sptno), #
            data = df_source, cex = sourceCex, col = sourceCol)  #
    }#
    myMap#
}#
#
myNames <- read.table("~/Dropbox/10 R code/geoPlotMapText/testnames.txt",header=FALSE)#
mySources <- LETTERS[1:8]#
#
mySources <- c("Morlich Gardens","Cedar Grove")#
myNames <- c("Grove","Forthill","JLC","Fishermans","Royal Arch","Vissocchi's","Fiona","G&S1","G&S2","RSMcColl","VG")#
geoPlotMapText(data = d, source = s, sourceNames = mySources,params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)#
#
geoPlotMapText(data = d, source = s, crimeNames = myNames, sourceNames = mySources, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)#
#
geoPlotMapText(data = d, source = s, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText
geoPlotMapText(data = d, source = s, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText(data = d, source = s, sourceNames = mySources,params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText(data = d, source = s, crimeNames = myNames, sourceNames = mySources, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
geoPlotMapText(data = d, source = s, params = p, breakPercent = seq(0, 100, 2), mapType = "roadmap", contourCols = masked_rainbow, crimeCol = "black", crimeCex = 4, sourceCol = "blue", sourceCex = 4, surface = m$geoProfile, gpLegend=FALSE)
library(RgeoProfile)
getZoom
# clear workspace and load packages#
rm(list=ls())#
library(ggplot2)#
#
#______________________________________________________________________#
# IMPORT DATA AND CHECK STRUCTURE#
all_data <- read.table("~/Dropbox/2 Teaching/1 QM/Undergraduate/2017-18/BIO100 Ecology/Nettlecombe/Primroses/2018 data/6 Monday/DarcyEloiseRita.txt",header=TRUE)#
attach(all_data)#
#
# TOTALS#
nrow(all_data)#
sum(all_data[,3])#
str(all_data)#
#______________________________________________________________________#
# Q1: DO PIN AND THRUM *FLOWERS* OCCUR IN EQUAL PROPORTIONS?#
# build contingency table for flowers#
# pin summary flowers#
pin_data <- subset(all_data,all_data$plant=="pin")#
my_table <- table(pin_data $flowers, pin_data$site)#
my_table_pin <- as.integer(rownames(my_table))*my_table#
#
# thrum summary flowers#
thrum_data <- subset(all_data,all_data$plant=="thrum")#
my_table <- table(thrum_data$flowers, thrum_data$site)#
my_table_thrum <- as.integer(rownames(my_table))* my_table#
# flowers by site#
pin <- apply(my_table_pin,2,sum)#
thrum <- apply(my_table_thrum,2,sum)#
flower.summary <- cbind(pin,thrum)#
flower.summary#
chisq.test(flower.summary)#
#______________________________________________________________________#
# Q2: DO PIN AND THRUM *PLANTS* OCCUR IN EQUAL PROPORTIONS?#
plant.summary <- table(primrose_data$site,primrose_data$plant)#
plant.summary#
chisq.test(plant.summary)#
#
#______________________________________________________________________#
# Q3: DO PIN AND THRUM PLANTS HAVE EQUAL NUMBERS OF FLOWERS?#
# extract numbers of pin and thrum plants#
pin_plants <- length(which(primrose_data $plant=="pin"))#
thrum_plants <- length(which(primrose_data $plant=="thrum"))#
pin_flowers <- sum(primrose_data $flowers[which(primrose_data $plant=="pin")])#
thrum_flowers <- sum(primrose_data $flowers[which(primrose_data $plant=="thrum")])#
#
# test#
mod1 <- lm(flowers~plant)#
summary(mod1)#
#______________________________________________________________________#
# PLOTS#
par(mfrow=c(2,1))#
# flowers#
barplot(t(flower.summary),beside=TRUE,legend=TRUE,col=c("white","yellow"),ylab="number of flowers")#
# plants#
barplot(table(primrose_data$plant, primrose_data$site),beside=TRUE,legend=TRUE,col=c("white","yellow"),ylab="number of plants")#
# flowers per plant#
quartz()#
p<-ggplot(primrose_data,aes(as.factor(site),flowers,plant))#
p + geom_boxplot(aes(fill = plant)) + scale_y_continuous(name="flowers") + scale_x_discrete(name="\nsite") + scale_fill_manual(values=c("lightgreen", "yellow"), name="plant",breaks=c("pin","thrum"),labels=c("pin", "thrum"))#
#______________________________________________________________________
#______________________________________________________________________#
# Q2: DO PIN AND THRUM *PLANTS* OCCUR IN EQUAL PROPORTIONS?#
plant.summary <- table(all_data$site, all_data $plant)#
plant.summary#
chisq.test(plant.summary)
chisq.test(flower.summary)
#______________________________________________________________________#
# Q3: DO PIN AND THRUM PLANTS HAVE EQUAL NUMBERS OF FLOWERS?#
# extract numbers of pin and thrum plants#
pin_plants <- length(which(primrose_data $plant=="pin"))#
thrum_plants <- length(which(primrose_data $plant=="thrum"))#
pin_flowers <- sum(primrose_data $flowers[which(primrose_data $plant=="pin")])#
thrum_flowers <- sum(primrose_data $flowers[which(primrose_data $plant=="thrum")])#
#
# test#
mod1 <- lm(flowers~plant)#
summary(mod1)
#______________________________________________________________________#
# PLOTS#
par(mfrow=c(2,1))#
# flowers#
barplot(t(flower.summary),beside=TRUE,legend=TRUE,col=c("white","yellow"),ylab="number of flowers")#
# plants#
barplot(table(primrose_data$plant, primrose_data$site),beside=TRUE,legend=TRUE,col=c("white","yellow"),ylab="number of plants")#
# flowers per plant#
quartz()#
p<-ggplot(primrose_data,aes(as.factor(site),flowers,plant))#
p + geom_boxplot(aes(fill = plant)) + scale_y_continuous(name="flowers") + scale_x_discrete(name="\nsite") + scale_fill_manual(values=c("lightgreen", "yellow"), name="plant",breaks=c("pin","thrum"),labels=c("pin", "thrum"))#
#______________________________________________________________________
# PLOTS#
par(mfrow=c(2,1))#
# flowers#
barplot(t(flower.summary),beside=TRUE,legend=TRUE,col=c("white","yellow"),ylab="number of flowers")#
# plants#
barplot(table(all_data$plant, all_data $site),beside=TRUE,legend=TRUE,col=c("white","yellow"),ylab="number of plants")#
# flowers per plant#
quartz()#
p<-ggplot(all_data,aes(as.factor(site),flowers,plant))#
p + geom_boxplot(aes(fill = plant)) + scale_y_continuous(name="flowers") + scale_x_discrete(name="\nsite") + scale_fill_manual(values=c("lightgreen", "yellow"), name="plant",breaks=c("pin","thrum"),labels=c("pin", "thrum"))
barplot(t(flower.summary),beside=TRUE,legend=TRUE,col=c("lightgreen","yellow"),ylab="number of flowers")
#______________________________________________________________________#
# PLOTS#
par(mfrow=c(2,1))#
# flowers#
barplot(t(flower.summary),beside=TRUE,legend=TRUE,col=c("lightgreen","yellow"),ylab="number of flowers")#
# plants#
barplot(table(all_data$plant, all_data $site),beside=TRUE,legend=TRUE,col=c("lightgreen","yellow"),ylab="number of plants")#
# flowers per plant#
quartz()#
p<-ggplot(all_data,aes(as.factor(site),flowers,plant))#
p + geom_boxplot(aes(fill = plant)) + scale_y_continuous(name="flowers") + scale_x_discrete(name="\nsite") + scale_fill_manual(values=c("lightgreen", "yellow"), name="plant",breaks=c("pin","thrum"),labels=c("pin", "thrum"))#
#______________________________________________________________________
#______________________________________________________________________#
# Q1: DO PIN AND THRUM *FLOWERS* OCCUR IN EQUAL PROPORTIONS?#
# build contingency table for flowers#
# pin summary flowers#
pin_data <- subset(all_data,all_data$plant=="pin")#
my_table <- table(pin_data $flowers, pin_data$site)#
my_table_pin <- as.integer(rownames(my_table))*my_table#
#
# thrum summary flowers#
thrum_data <- subset(all_data,all_data$plant=="thrum")#
my_table <- table(thrum_data$flowers, thrum_data$site)#
my_table_thrum <- as.integer(rownames(my_table))* my_table#
# flowers by site#
pin <- apply(my_table_pin,2,sum)#
thrum <- apply(my_table_thrum,2,sum)#
flower.summary <- cbind(pin,thrum)#
flower.summary#
chisq.test(flower.summary)
#______________________________________________________________________#
# Q2: DO PIN AND THRUM *PLANTS* OCCUR IN EQUAL PROPORTIONS?#
plant.summary <- table(all_data$site, all_data $plant)#
plant.summary#
chisq.test(plant.summary)
#______________________________________________________________________#
# Q3: DO PIN AND THRUM PLANTS HAVE EQUAL NUMBERS OF FLOWERS?#
# extract numbers of pin and thrum plants#
pin_plants <- length(which(primrose_data $plant=="pin"))#
thrum_plants <- length(which(primrose_data $plant=="thrum"))#
pin_flowers <- sum(primrose_data $flowers[which(primrose_data $plant=="pin")])#
thrum_flowers <- sum(primrose_data $flowers[which(primrose_data $plant=="thrum")])#
#
# test#
mod1 <- lm(flowers~plant)#
summary(mod1)
# Rgeoprofile_deploy.R#
# Author: Bob Verity#
# Date: 2017-05-26#
# Purpose:#
# Tests and demonstrates use of RgeoProfile package.#
# ------------------------------------------------------------------#
library(devtools)#
setwd("~/GitHub/Rgeoprofile")
devtools::load_all()
#set.seed(1)#
# define parameters and draw some data#
n <- 1e2#
sigma_mean <- 1#
sigma_var <- 1#
sigma <- sigma_mean#
tau <- 10#
alpha <- 10
DPM_draws = rDPM(n, sigma=sigma, tau=tau, alpha=alpha, priorMean_longitude=-0.035, priorMean_latitude=51.52)
DPM_draws
simData <- geoData(DPM_draws$longitude, DPM_draws$latitude)
simSource <- geoDataSource(DPM_draws$source_lon, DPM_draws$source_lat)
data <- LondonExample_crimes
source <- LondonExample_sources
params = geoParams(data = data, sigma_mean = sigma_mean, sigma_var = NULL, sigma_squared_shape = 2, chains = 5, burnin = 1e3, samples = 1e4, longitude_cells = 200, latitude_cells = 200)
map1 <- geoPlotMap(params = params, data = data, source = source)
map1
geoPlotSigma(params = params)
m = geoMCMC(data = data, params = params)
geoPlotSigma(params = params, mcmc = m)
abline(v = sigma, col = 2)
geoPlotAllocation(mcmc = m)
geoPlotCoallocation(mcmc = m)
map2 <- geoPlotMap(params = params, data = data, source = source, surface = m$geoProfile, breakPercent = seq(0,50,l=21), opacity = 0.8)
map2
# plot zoomed in#
map3 <- geoPlotMap(lonLimits = c(-0.06,-0.02), latLimits = c(51.52, 51.54), params = params, data = data, source = source, surface = m$geoProfile, breakPercent = seq(0,50,l=21), opacity = 0.8)#
map3
geoPersp(surface = m$geoProfile, aggregate_size = 1)
hs <- geoReportHitscores(params = params, source = source, surface =m$geoProfile)#
hs
# produce Lorenz plot#
Gini <- geoPlotLorenz(hit_scores = hs)#
Gini
Gini
Gini <- geoPlotLorenz(hit_scores = hs)
geoModelSources(mcmc = m, data = data)
surface_ring <- geoRing(params = params, data = data, source = source, mcmc = m)
gp_ring <- geoProfile(surface = surface_ring)
map4 <- geoPlotMap(params = params, data = data, source = source, surface = gp_ring, opacity = 1, breakPercent = seq(0,50,l=21))
map4
# hitscores of ring search geoprofile#
hs_ring <- geoReportHitscores(params = params, source = source, surface = gp_ring)#
hs_ring
# read in north London shapefile as mask#
north_london_mask <- geoShapefile()#
# mask posterior surface and geoprofile#
prob_masked <- geoMask(m$posteriorSurface, params, north_london_mask, operation="inside", scaleValue=1)#
gp_masked <- geoProfile(prob_masked$prob)
map5 <- geoPlotMap(params, data=data, source=source, surface=gp_masked, opacity=0.8)#
map5
? geoDataSource
# John Snow cholera data#
geoDataSource(WaterPumps$longitude, WaterPumps$latitude)#
#
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
geoDataSource(sim$longitude, sim$latitude)
?geoPlotMap
# John Snow cholera data#
d <- Cholera#
s <- WaterPumps#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2)#
m <- geoMCMC(data = d, params = p, lambda=0.05)#
# produce simple map#
geoPlotMap(params = p, data = d, source = s, surface = m$geoProfile,#
                breakPercent = seq(0, 50, 5), mapType = "hybrid",#
                crimeCol = "black", crimeCex = 2, sourceCol = "red", sourceCex = 2)
?ggplot2
?RgeoProfile
devtools::check()
# test changes to help file#
#
rm(list=ls())#
library(devtools)#
# install from local github repository#
# install.packages("~/GitHub/Rgeoprofile", repos = NULL, type = "source",force=TRUE)
install.packages("~/GitHub/Rgeoprofile", repos = NULL, type = "source",force=TRUE)
simSource <- geoDataSource(DPM_draws$source_lon, DPM_draws$source_lat)
?RgeoProfile
?ggplot2
