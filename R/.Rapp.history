require("cholera_data")
data(cholera_data)
data("cholera_data")
data("cholera_data.txt")
data(cholera_data)
# _______________________________________________________#
# LOAD ANY OTHER USEFUL FUNCTIONS#
# _______________________________________________________#
# allows rotation reflection etc of matrix#
# note that "reflect_diagonal" only works with square matrices#
matrix_manipulation <- function(my_matrix,my_operation)#
	{#
		if(my_operation=="reflect_y") {return(my_matrix[,ncol(my_matrix):1])}#
		if(my_operation=="reflect_x") {return(my_matrix[nrow(my_matrix):1,])}#
		if(my_operation=="rotate_180") {return(my_matrix[nrow(my_matrix):1,ncol(my_matrix):1])}#
		if(my_operation=="reflect_diag") {return(t(my_matrix))}#
		if(my_operation=="rotate_90") {return(t(my_matrix)[,nrow(my_matrix):1])}#
		if(my_operation=="rotate_-90") {return(t(my_matrix)[ncol(my_matrix):1,])}#
	}#
#
# some pre-selected colour options for contours#
my_rainbow <- c("red","orange","yellow","white")#
my_reverse_rainbow <- c("white","yellow","orange","red")#
my_rigel <- c("purple","darkblue","blue","lightblue","darkgreen","green","yellow","red")#
my_blues <- c("blue","white")#
my_grays <- c("black","white")#
my_yellows <- c("yellow","white")#
my_reds <- c("red","white")#
# _______________________________________________________#
# IMPORT DATA#
# _______________________________________________________#
# import crimes and sources#
crime_input <- read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/MalariaCases139.txt")#
sources_input <- read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/CairoOriginalVectorList.txt")#
#
# _______________________________________________________#
# LOAD DATA AND SPECIFY MODEL PARAMETERS#
# _______________________________________________________#
# load data#
crime_data <- geoData(crime_input[,1], crime_input[,2])#
source_data <- geoDataSource(sources_input[,1], sources_input[,2])
crime_data
save(crime_data,"cholera.Rd")
save(crime_data,file="cholera.Rd")
save(source_data,file="water_pumps.Rd")
require(cholera)
data(cholera)
data(cholera.Rd)
data("cholera.Rd")
# _______________________________________________________#
# NEW MODEL#
# _______________________________________________________#
# 22 MARCH 2017#
# With new version of geoPlotLorenz()#
#
# _______________________________________________________#
# CLEAR WORKSPACE AND LOAD PACKAGE FROM GITHUB OR LOCAL#
# REPOSITORY#
# _______________________________________________________#
rm(list=ls())#
# if installing for the first time from github, install these#
# install.packages("devtools")#
# library(devtools)#
#
# install from github or from local copy of package#
# install stable copy of version 2.0.0 from github#
# install_github("bobverity/Rgeoprofile",ref="version2.0.0")#
#
# install from local github repository#
# install.packages("~/GitHub/Rgeoprofile", repos = NULL, type = "source",force=TRUE)#
#
# install from downloaded copy on desktop (NB check name and path)#
# install.packages("~/Desktop/Rgeoprofile-develop", repos = NULL, type = "source")#
#
# load packages#
library(RgeoProfile)
require(cholera)
data(cholera)
require(RgeoProfile)
data(cholera)
data(cholera.Rd)
save(crime_data,file="cholera.rda")
# _______________________________________________________#
# LOAD ANY OTHER USEFUL FUNCTIONS#
# _______________________________________________________#
# allows rotation reflection etc of matrix#
# note that "reflect_diagonal" only works with square matrices#
matrix_manipulation <- function(my_matrix,my_operation)#
	{#
		if(my_operation=="reflect_y") {return(my_matrix[,ncol(my_matrix):1])}#
		if(my_operation=="reflect_x") {return(my_matrix[nrow(my_matrix):1,])}#
		if(my_operation=="rotate_180") {return(my_matrix[nrow(my_matrix):1,ncol(my_matrix):1])}#
		if(my_operation=="reflect_diag") {return(t(my_matrix))}#
		if(my_operation=="rotate_90") {return(t(my_matrix)[,nrow(my_matrix):1])}#
		if(my_operation=="rotate_-90") {return(t(my_matrix)[ncol(my_matrix):1,])}#
	}#
#
# some pre-selected colour options for contours#
my_rainbow <- c("red","orange","yellow","white")#
my_reverse_rainbow <- c("white","yellow","orange","red")#
my_rigel <- c("purple","darkblue","blue","lightblue","darkgreen","green","yellow","red")#
my_blues <- c("blue","white")#
my_grays <- c("black","white")#
my_yellows <- c("yellow","white")#
my_reds <- c("red","white")#
# _______________________________________________________#
# IMPORT DATA#
# _______________________________________________________#
# import crimes and sources#
crime_input <- read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/MalariaCases139.txt")#
sources_input <- read.table("~/Dropbox/9 Shared/Work Shared/Cases/Cairo/Cairo MEE/CairoOriginalVectorList.txt")#
#
# _______________________________________________________#
# LOAD DATA AND SPECIFY MODEL PARAMETERS#
# _______________________________________________________#
# load data#
crime_data <- geoData(crime_input[,1], crime_input[,2])#
source_data <- geoDataSource(sources_input[,1], sources_input[,2])
save(crime_data,file="cholera.rda")
save(source_data,file="water_pumps.rda")
data(cholera)
cholera
data(cholera)
cholera
cholera <- data(cholera)
cholera
require(Rgeoprofile)
require(RgeoProfile)
data(cholera)
cholera
crime_data
save(crime_data,file="cholera.rda")
require(RgeoProfile)
data(cholera)
cholera
d <- data(cholera)
d
library(RgeoProfile)
d <- data(cholera)
d
document()
library(devtools)
document()
?geoParams
document()
?geoParams
document()
?geoParams
document()
?geoPlotMap
document()
?geoPlotMap
document()
?geoPlotMap
document()
?geoPlotMap
document()
?geoPlotMap
document()
?geoPlotMap
document()
?geoPlotMap
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,burnin=1000,priorMean_longitude=mean(dat$longitude),#
priorMean_latitude=mean(dat$latitude),guardRail=0.1)#
m <- geoMCMC(d,p)#
gp <- geoProfile(m$surface)#
#
# basic map#
#
geoPlotMap(params=p, data=d, source=s,breakPercent=seq(0,50,5),mapType="hybrid",contourCols=c("red","orange","yellow","white"),#
crimeCol="black", crimeBorderCol="white",crimeCex=2,sourceCol="red", sourceCex=2,surface=gp)#
#
# changing the colour palette, background map, transparency and range of geoprofile to plot#
#
geoPlotMap(params=p, data=d, source=s,breakPercent=seq(0,30,5),mapType="terrain",contourCols=c("blue","white"),#
crimeCol="black", crimeBorderCol="white",crimeCex=2,sourceCol="red", sourceCex=2,surface=gp,transparency=0.7)
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,burnin=1000,priorMean_longitude=mean(dat$longitude),
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,burnin=1000,priorMean_longitude=mean(dat$longitude),priorMean_latitude=mean(dat$latitude),guardRail=0.1)
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,burnin=1000,priorMean_longitude=mean(dat$longitude),priorMean_latitude=mean(d$latitude),guardRail=0.1)
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,burnin=1000,priorMean_longitude=mean(d$longitude),priorMean_latitude=mean(d$latitude),guardRail=0.1)
document()
?geoPlotMap
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,burnin=1000,priorMean_longitude=mean(d$longitude),#
priorMean_latitude=mean(d$latitude),guardRail=0.1)#
m <- geoMCMC(d,p)#
gp <- geoProfile(m$surface)#
#
# basic map#
#
geoPlotMap(params=p, data=d, source=s,breakPercent=seq(0,50,5),mapType="hybrid",contourCols=c("red","orange","yellow","white"),#
crimeCol="black", crimeBorderCol="white",crimeCex=2,sourceCol="red", sourceCex=2,surface=gp)
# changing the colour palette, background map, transparency and range of geoprofile to plot#
#
geoPlotMap(params=p, data=d, source=s,breakPercent=seq(0,30,5),mapType="terrain",contourCols=c("blue","white"),crimeCol="black", crimeBorderCol="white",crimeCex=2,sourceCol="red", sourceCex=2,surface=gp,transparency=0.7)
crimeCol="black", crimeBorderCol="white",crimeCex=2,sourceCol="red", sourceCex=2,surface=gp)
geoPlotMap(params=p, data=d, source=s,breakPercent=seq(0,50,5),mapType="hybrid",contourCols=c("red","orange","yellow","white"),crimeCol="black", crimeBorderCol="white",crimeCex=2,sourceCol="red", sourceCex=2,surface=gp)
?RgeoProfile
?Rgeoprofile
R CMD Rd2pdf RGeoProfile
CMD Rd2pdf RGeoProfile
library(devtools)#
#
check(cleanup = FALSE,manual = TRUE,path = getwd())
system("R CMD Rd2pdf RgeoProfile")
system("R CMD Rd2pdf Rgeoprofile")
library(devtools)
system("R CMD Rd2pdf Rgeoprofile")
system("R CMD Rd2pdf RgeoProfile")
system("R CMD Rd2pdf MyRpackage")
system("R CMD Rd2pdf Rgeoprofile")
system("R CMD Rd2pdf RgeoProfile")
?r2d2pdf
system("R CMD Rd2pdf Rgeoprofile")
system("R CMD Rd2pdf RgeoProfile")
system(R CMD Rd2pdf "RgeoProfile")
?system
pack <- "Rgeoprofile"#
#
path <- find.package(pack)#
#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
pack <- "Rgeoprofile"#
#
path <- find.package(Rgeoprofile)#
#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
path <- find.package(RgeoProfile)
path <- find.package("RgeoProfile")
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
# create pdf but seems to need TeX binary#
#
pack <- "Rgeoprofile"#
path <- find.package("RgeoProfile")#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
pack <- "Rgeoprofile"#
path <- find.package("RgeoProfile")#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
$ which pdftex
sys.setenv("PKG_CXXFLAGS"="-std=c++11")
Sys.setenv("PKG_CXXFLAGS"="-std=c++11")
pack <- "Rgeoprofile"#
path <- find.package("RgeoProfile")#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
bash-3.2$ which tex /usr/texbin/tex
bash-3.2$ which pdftex
pack <- "Rgeoprofile"#
path <- find.package("RgeoProfile")#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
library(devtools)#
document()
?geoPlotMap
# then run the following#
pack <- "Rgeoprofile"#
path <- find.package("RgeoProfile")#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
library(devtools)
document()
?geoMCMC
library(RgeoProfile)
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,#
burnin=1000,priorMean_longitude=mean(dat$longitude),priorMean_latitude=#
mean(dat$latitude),guardRail=0.1)#
m <- geoMCMC(datda=d,params=p)
library(Rgeoprofile)
library(RgeoProfile)
document()
?geoMCMC
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,#
burnin=1000,priorMean_longitude=mean(d$longitude),priorMean_latitude=#
mean(d$latitude),guardRail=0.1)#
m <- geoMCMC(datda=d,params=p)
document()
?geoMCMC
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,#
burnin=1000,priorMean_longitude=mean(d$longitude),priorMean_latitude=#
mean(d$latitude),guardRail=0.1)#
m <- geoMCMC(data=d,params=p)
document()
library(devtools)#
document()
library(devtools)
document()
library(devtools)
document()
?geoParams
document()
library(devtools)
document()
?geoReportHitscores
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,#
burnin=1000,priorMean_longitude=mean(dat$longitude),#
priorMean_latitude=mean(dat$latitude),guardRail=0.1)#
m <- geoMCMC(data=d,params=p)#
gp <- geoProfile(surface=m$surface)#
hs <- geoReportHitscores(params=p,source_data=s,surface=m$surface)
document()
?geoReportHitscores
document()
geoReportHitscores
?geoReportHitscores
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,#
burnin=1000,priorMean_longitude=mean(d$longitude),#
priorMean_latitude=mean(d$latitude),guardRail=0.1)#
m <- geoMCMC(data=d,params=p)#
gp <- geoProfile(surface=m$surface)#
hs <- geoReportHitscores(params=p,source_data=s,surface=m$surface)
hs
library(devtools)
document()
library(devtools)
document()
?geoReportHitscores
document()
?geoReportHitscores
document()
?geoReportHitscores
library(devtools)
document()
?geoMCMC
document()
?geoMCMC
document()
?geoMCMC
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,#
burnin=1000,priorMean_longitude=mean(d$longitude),priorMean_latitude=mean(d$latitude),#
guardRail=0.1)#
m <- geoMCMC(data=d,params=p)
library(devtools)#
document()
?geoMCMC
library(devtools)
document()
?geoMCMC
library(devtools)#
document()
# then run the following#
library(RgeoProfile)#
path <- "~/GitHub/Rgeoprofile"#
system(paste(shQuote(file.path(R.home("bin"), "R")),"CMD", "Rd2pdf", shQuote(path)))
library(devtools)
document()
?geoParamsCheck
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
p <- geoParams(data=d,sigma_mean=1.0,sigma_squared_shape=2,samples=20000,chains=10,burnin=1000,#
priorMean_longitude=mean(d$longitude),priorMean_latitude=mean(d$latitude),guardRail=0.1)#
geoParamsCheck(p)
library(devtools)
document()
document()
document()
?geoData
document()
?geoDataSource
# john snow cholera data#
data(WaterPumps)#
geoDataSource(WaterPumps[,1], WaterPumps[,2])#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
s <- geoDataSource(sim$source_longitude, sim$source_latitude)
s
document()
?geoDataSource
# john snow cholera data#
data(WaterPumps)#
geoDataSource(WaterPumps[,1], WaterPumps[,2])#
#
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
s <- geoDataSource(sim$source_longitude, sim$source_latitude)#
s
document()
?geoDataSource
?geoParams
document()
?geoParams
# john snow cholera data#
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
# define prior so that the model fits sigma from the data#
geoParams(data= d, sigma_mean = 1.0 ,sigma_squared_shape = 2, samples = 20000, chains = 10,
document()
?geoParams
?geoParams
?geoParams
document()
document()
?geoParams
document()
document()
document()
?geoParams
# john snow cholera data#
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
# define prior so that the model fits sigma from the data#
geoParams(data= d, sigma_mean = 1.0 ,sigma_squared_shape = 2, samples = 20000, chains = 10, #
burnin = 1000, priorMean_longitude=mean(d$longitude), priorMean_latitude = #
mean(d$latitude), guardRail = 0.1)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
s <- geoDataSource(sim$source_longitude, sim$source_latitude)#
# use a fixed value of sigma#
geoParams(data = d, source = s, sigma_mean = 1.0, sigma_var = 0, samples = 20000, chains=10, #
burnin=1000,priorMean_longitude=mean(d$longitude), priorMean_latitude = mean(d$latitude), #
guardRail = 0.1)
document()
?geoParams
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
# use a fixed value of sigma#
geoParams(data = d, sigma_mean = 1.0, sigma_var = 0, samples = 20000, chains=10, #
burnin=1000,priorMean_longitude=mean(d$longitude), priorMean_latitude = mean(d$latitude), #
guardRail = 0.1)
document()
?geoParamsCheck
# john snow cholera data#
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
geoParamsCheck(p)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(Cholera[,1], Cholera[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
geoParamsCheck(p)
# john snow cholera data#
data(Cholera)d <- geoData(Cholera[,1], Cholera[,2])data(WaterPumps)s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), priorMean_latitude = mean(d$latitude), guardRail = 0.1)m <- geoMCMC(d, p)
document()
?geoPlotSigma
document()
document()
?geoPlotSigma
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(Cholera[,1], Cholera[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
geoPlotSigma(params = p,sigma = m$sigma)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
geoPlotSigma(params = p,sigma = m$sigma)
document()
?geoMCMC
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(Cholera[,1], Cholera[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)
document()
?geoProfile
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(Cholera[,1], Cholera[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
geoProfile(m$surface)
document()
?geoPLotMap
# john snow cholera data#
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
gp <- geoProfile(m$surface)#
# basic map#
geoPlotMap(params=p,data=d,source=s,breakPercent=seq(0,50,5),mapType="hybrid",#
contourCols=c("red","orange","yellow","white"),crimeCol="black",crimeBorderCol="white",#
crimeCex=2,sourceCol="red",sourceCex=2,surface=gp)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
gp <- geoProfile(m$surface)#
# changing the colour palette, background map, transparency and range of geoprofile to plot#
geoPlotMap(params=p, data=d, source=s,breakPercent=seq(0,30,5),mapType="terrain",#
contourCols=c("blue","white"),crimeCol="black", crimeBorderCol="white",crimeCex=2,#
sourceCol="red", sourceCex=2,surface=gp,transparency=0.7)
document()
?geoPlotMAp
# john snow cholera data#
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
gp <- geoProfile(m$surface)#
# basic map#
geoPlotMap(params = p, data = d, source = s, breakPercent = seq(0, 50, 5), mapType = "hybrid",#
contourCols = c("red", "orange", "yellow", "white"), crimeCol = "black", crimeBorderCol = "white", #
crimeCex = 2, sourceCol = "red", sourceCex = 2, surface = gp)
geoPlotMap(params = p, data = d, source = s, breakPercent = seq(0, 50, 5), mapType = "hybrid",#
contourCols = c("red", "orange", "yellow", "white"), crimeCol = "black", crimeBorderCol = "white", #
crimeCex = 2, sourceCol = "red", sourceCex = 2, surface = gp)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
s <- geoDataSource(sim$source_lon, sim$source_lat)#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
gp <- geoProfile(m$surface)#
# changing the colour palette, background map, transparency and range of geoprofile to plot#
geoPlotMap(params = p, data = d, source = s,breakPercent = seq(0, 30, 5), mapType = "terrain", #
contourCols=c("blue","white"),crimeCol="black", crimeBorderCol="white",crimeCex=2,#
sourceCol = "red", sourceCex = 2, surface = gp, transparency = 0.7)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = 51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
s <- geoDataSource(sim$source_lon, sim$source_lat)
s
sim
table(sim$group)
table(sim$group)
table(sim$group)[1]
length(table(sim$group))
document()
?geoPlotLorenz
# john snow cholera data#
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
gp <- geoProfile(m$surface)#
geoPlotMap(params = p, data = d, source = s, breakPercent = seq(0, 50, 5), mapType = "hybrid",#
contourCols = c("red", "orange", "yellow", "white"), crimeCol = "black", crimeBorderCol = "white", #
crimeCex = 2, sourceCol = "red", sourceCex = 2, surface = gp)#
hs <- geoReportHitscores(params=p,source_data=s,surface=m$surface)#
# Lorenz plot#
geoPlotLorenz(hit_scores=hs)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
s <- geoDataSource(sim$source_lon, sim$source_lat)#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
gp <- geoProfile(m$surface)#
# changing the colour palette, background map, transparency and range of geoprofile to plot#
geoPlotMap(params = p, data = d, source = s,breakPercent = seq(0, 30, 5), mapType = "terrain", #
contourCols=c("blue","white"),crimeCol="black", crimeBorderCol="white",crimeCex=2,#
sourceCol = "red", sourceCex = 2, surface = gp, transparency = 0.7)#
hs <- geoReportHitscores(params=p,source_data=s,surface=m$surface)#' geoPlotLorenz(hit_scores=hs)#
# Lorenz plot using number of incidents per source#
cr <- table(sim$group)#
geoPlotLorenz(hit_scores=hs,crimeNumbers=cr)
document()
?prob_coallocation
# john snow cholera data#
data(Cholera)#
d <- geoData(Cholera[,1],Cholera[,2])#
data(WaterPumps)#
s <- geoDataSource(WaterPumps[,1], WaterPumps[,2])#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
prob_coallocation(crime1=1,crime2=3,coallocation_matrix=m$allocation)
# simulated data#
sim <-rDPM(50, priorMean_longitude = -0.04217491, priorMean_latitude = #
51.5235505, alpha=1, sigma=1, tau=3)#
d <- geoData(sim$longitude, sim $latitude)#
s <- geoDataSource(sim$source_lon, sim$source_lat)#
p <- geoParams(data = d, sigma_mean = 1.0, sigma_squared_shape = 2, samples = 20000, #
chains = 10, burnin = 1000, priorMean_longitude = mean(d$longitude), #
priorMean_latitude = mean(d$latitude), guardRail = 0.1)#
m <- geoMCMC(data = d, params = p)#
prob_coallocation(crime1=1,crime2=3,coallocation_matrix=m$allocation)
